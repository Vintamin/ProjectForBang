//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : ilayer.cpp
//  @ Date : 2014/7/6
//  @ Author : 盛佳良
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#include "vrmine\vr_spatialinterface\ilayer.h"

using namespace VirtualMine::Core;

namespace VirtualMine
{
	namespace SpatialInterface
	{
		ILayer::ILayer()
			:CBaseObject()
		{}

		ILayer::~ILayer()
		{}

		std::string ILayer::getName()
		{
			throw std::exception();
		}

		void ILayer::setName(const std::string& name)
		{}

		bool ILayer::getVisible()
		{
			throw std::exception();
		}

		void ILayer::setVisible(const bool& visible)
		{}

		void ILayer::draw()
		{}

		void ILayer::update()
		{}

		void ILayer::initialise()
		{}

		void ILayer::notifyUpdate()
		{}

		void ILayer::setType(const std::string& type)
		{}

		std::string ILayer::getType()
		{
			throw std::exception();
		}

		VirtualMine::Database::IDataset* ILayer::getDataSet()
		{
			throw std::exception();
		}

		void ILayer::setDataSet(VirtualMine::Database::IDataset* pDataSet)
		{}

	

		void ILayer::setStyle(IStyle* pStyle)
		{
			throw std::exception();
		}
		
		IStyle* ILayer::getStyle()
		{
			throw std::exception();
		}

		void ILayer::setGeoSceneManager(Ogre::SceneManager* ref_pSceneManager)
		{
			throw std::exception();
		}

		Ogre::SceneManager* ILayer::getGeoSceneManager()
		{
			throw std::exception();
		}

		void ILayer::resetResource()
		{

		}

	

	/*	void ILayer::getGeoObjects( VirtualMine::SpatialInterface::GeoObjectVector& geoObjects )
		{

		}

		VirtualMine::SpatialInterface::IGeoObject* ILayer::getGeoObject( const std::string& name )
		{
			throw std::exception();
		}
*/
		CLayerFactory::CLayerFactory()
		{
		
		}

		CLayerFactory::~CLayerFactory()
		{
		
		}

		CBaseObject* CLayerFactory::createInstance()
		{	
			throw std::exception();
		}

		ILayer* CLayerFactory::createInstance(const std::string& name)
		{
			throw std::exception();
		}

		void CLayerFactory::destroyInstance(ILayer* pLayer)
		{
			SAFE_DELETE(pLayer);
		}

		std::string CLayerFactory::getType()
		{
			throw std::exception();
		}

	}
}
