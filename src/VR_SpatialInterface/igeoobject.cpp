//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : igeoobject.cpp
//  @ Date : 2014/7/6
//  @ Author : 盛佳良
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#include "vrmine\vr_spatialinterface\igeoobject.h"


namespace VirtualMine
{
	namespace SpatialInterface
	{
		
		class CGeoObject_privateData 
		{
		public:
			CGeoObject_privateData()
				:ref_mpStyle(NULL),mpGeometry(NULL),
				mpGeoProperty(NULL),mType("INVALID_TYPE"),
				mVisible(false),mIsStyleRef(false),
				mIsGeometryRef(false),mIsPropertyRef(false),mID(0)
			{

			}

			~CGeoObject_privateData()
			{
				if (this->mpGeometry && !this->mIsGeometryRef)
				{
					delete this->mpGeometry;
					this->mpGeometry = NULL;
				}
				if (this->ref_mpStyle && !this->mIsStyleRef)
				{
					delete this->ref_mpStyle;
					this->ref_mpStyle = NULL;
				}
				if (this->mpGeoProperty && !this->mIsPropertyRef)
				{
					delete this->mpGeoProperty;
					this->mpGeoProperty = NULL;
				}
			}

		public:
			IStyle* ref_mpStyle;
			IGeometry* mpGeometry;
			IGeoProperty* mpGeoProperty;

			int mID;
			std::string mName;
			std::string mType;
			bool mIsStyleRef;
			bool mIsGeometryRef;
			bool mIsPropertyRef;
			bool mVisible;
		};

		IGeoObject::IGeoObject()
		{}

		IGeoObject::~IGeoObject()
		{}

		CGeoObject::CGeoObject()
		{
			this->mpPrivate = new CGeoObject_privateData();
		}

		CGeoObject::~CGeoObject()
		{
			if (this->mpPrivate)
			{
				delete this->mpPrivate;
				this->mpPrivate = NULL;
			}
		}

		void CGeoObject::setGeoProperty(IGeoProperty* ref_pGeoProperty,const bool& isRef)
		{
			assert(ref_pGeoProperty);
			if (ref_pGeoProperty == NULL)
				return;

			if (this->mpPrivate->mpGeoProperty
				&& !this->mpPrivate->mIsPropertyRef)
			{
				delete this->mpPrivate->mpGeoProperty;
			}
			this->mpPrivate->mIsPropertyRef = isRef;
			if (!this->mpPrivate->mIsPropertyRef)
			{
				this->mpPrivate->mpGeoProperty = ref_pGeoProperty->clone();
			}
			else
			{
				this->mpPrivate->mpGeoProperty = ref_pGeoProperty;
			}

		}

		void CGeoObject::setType(std::string& type)
		{
			this->mpPrivate->mType = type;
		}

		std::string& CGeoObject::getType()
		{
			return this->mpPrivate->mType;	
		}
		void CGeoObject::setVisible(const bool& visible)
		{
			this->mpPrivate->mVisible = visible;
		}

		 void CGeoObject::setName(std::string& name)
		{
			this->mpPrivate->mName = name;
		}

		 

		 std::string CGeoObject::getName()
		{
			return this->mpPrivate->mName;
		}

		VirtualMine::SpatialInterface::IStyle* CGeoObject::getStyle()
		{
			return this->mpPrivate->ref_mpStyle;
		}

		 VirtualMine::SpatialInterface::IGeometry* CGeoObject::getGeometry()
		 {
			 return this->mpPrivate->mpGeometry;
		 }

		 IGeoProperty* CGeoObject::getGeoProperty()
		 {
			  return this->mpPrivate->mpGeoProperty;
		 }

		bool CGeoObject::getVisible()
		{
			return this->mpPrivate->mVisible;
		}

		void CGeoObject::setStyle(VirtualMine::SpatialInterface::IStyle* ref_pStyle,const bool& isRef)
		{
			assert(ref_pStyle);
			if (ref_pStyle == NULL)
				return;

			if (this->mpPrivate->ref_mpStyle 
				&& !this->mpPrivate->mIsStyleRef)
				delete this->mpPrivate->ref_mpStyle;
			this->mpPrivate->mIsStyleRef = isRef;
			if (!this->mpPrivate->mIsStyleRef)
			{
				this->mpPrivate->ref_mpStyle = ref_pStyle->clone();
			}
			else
			{
				this->mpPrivate->ref_mpStyle = ref_pStyle;
			}
		}

		void CGeoObject::fromFeature(VirtualMine::Database::IFeature* pFeature)
		{
			return ;
		}

		VirtualMine::Database::IFeature* CGeoObject::toFeature()
		{
			return NULL;
		}

		void CGeoObject::setGeometry(VirtualMine::SpatialInterface::IGeometry* ref_pGeometry,const bool& isRef)
		{
			assert(ref_pGeometry);
			if (NULL== ref_pGeometry)
			{
				return;
			}

			if (this->mpPrivate->mpGeometry
				&& !this->mpPrivate->mIsGeometryRef)
			{
				delete this->mpPrivate->mpGeometry;
			}
			this->mpPrivate->mIsGeometryRef = isRef;
			if (!this->mpPrivate->mIsGeometryRef)
			{
				this->mpPrivate->mpGeometry = ref_pGeometry->clone();
			}
			else
			{
				this->mpPrivate->mpGeometry = ref_pGeometry;
			}
		}

		int CGeoObject::getID()
		{
			return this->mpPrivate->mID;
		}

		void CGeoObject::setID( const int& id )
		{
			this->mpPrivate->mID = id;
		}

		CGeoExtentionData::CGeoExtentionData()
			:ref_mpSceneMgr(NULL),mpExtentionData(NULL),isTextObject(false)
		{

		}
		//kk设置为字体对象
		void CGeoExtentionData::setIsTextObject(bool judge)
		{
			this->isTextObject =judge;
		}
		//kk设置字体对象的位置
		void CGeoExtentionData::setTextPosition(Ogre::Vector3 center)
		{
			this->textPosition =center;
		}

		CGeoExtentionData::CGeoExtentionData(Ogre::SceneManager* ref_pSceneMgr)
			:ref_mpSceneMgr(ref_pSceneMgr),mpExtentionData(NULL),isTextObject(false)
		{
			ref_mpOwnerObject = NULL;
		}

		CGeoExtentionData::~CGeoExtentionData()
		{
			if (NULL != this->mpExtentionData)
			{
				this->ref_mpSceneMgr->destroyManualObject(this->mpExtentionData->getName());
				this->mpExtentionData = NULL;
			}
		}

		CGeoObject* CGeoExtentionData::getOwnerObject()
		{
			return ref_mpOwnerObject;
		}
		void CGeoExtentionData::setOwnerObject(CGeoObject* ref_pOwnerObject)
		{
			ref_mpOwnerObject = ref_pOwnerObject;
		}

		void CGeoExtentionData::setExtentionData(Ogre::ManualObject* manualObject)
		{
			this->mpExtentionData = manualObject;
		}

		Ogre::ManualObject* CGeoExtentionData::getExtentionData()
		{
			if (NULL == this->mpExtentionData)
			{
			 	this->mpExtentionData = this->ref_mpSceneMgr->createManualObject();	
			}
			return this->mpExtentionData;
		}

		void CGeoExtentionData::setSceneManager( Ogre::SceneManager* ref_pSceneMgr )
		{
			this->ref_mpSceneMgr = ref_pSceneMgr;
		}

		CGeoInstanceExtentionData::CGeoInstanceExtentionData()
		{
		
		}

		CGeoInstanceExtentionData::CGeoInstanceExtentionData(Ogre::SceneManager* ref_pSceneMgr)
			:CGeoExtentionData(ref_pSceneMgr)
		{

		}

		CGeoInstanceExtentionData::~CGeoInstanceExtentionData()
		{

		}

		void CGeoInstanceExtentionData::addParameter(const VirtualMine::SpatialInterface::CParameter& param)
		{
			this->mInstanceParams.push_back(param);
		}

		VirtualMine::SpatialInterface::CParameter& CGeoInstanceExtentionData::getParameter(const int& index)
		{
			return this->mInstanceParams.at(index);
		}

		void CGeoInstanceExtentionData::removeParameter(const int& index)
		{
			this->mInstanceParams.erase(this->mInstanceParams.begin() + index);
		}
		int CGeoInstanceExtentionData::getCount()
		{
			return this->mInstanceParams.size();
		}
	}
}
