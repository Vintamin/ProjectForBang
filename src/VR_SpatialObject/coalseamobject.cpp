//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : coalseamobject.cpp
//  @ Date : 2014/8/6
//  @ Author : 朱炜鹏
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#include "vrmine/vr_spatialobject/mine/coalseamobject.h"
#include "vrmine/vr_core/geodatatype.h"
#include "vrmine/vr_style/style/coalseamstyle.h"
#include "vrmine/vr_geometry/geometry/coalseam.h"
#include "vrmine/vr_spatialobject/geoproperty/coalseamproperty.h"
#include "vrmine/vr_databaseengine/database/coallayerfeature.h"
#include "OGRE/OgreFileSystem.h"
#include "vrmine/vr_mathenine/mathengine/mathcalculator.h"

//#include "OGRE/OgreArchiveFactory.h"
//#include "OGRE/OgreArchiveManager.h"


using namespace VirtualMine::GeoProperty;
using namespace VirtualMine::Database;
using namespace VirtualMine::Style;
using namespace VirtualMine::SpatialInterface;
using namespace VirtualMine::Geometry;
using namespace VirtualMine::MathEngine;

namespace VirtualMine
{
	namespace Mine
	{
		CCoalSeamObject::CCoalSeamObject()
		{
			this->setType(VirtualMine::Core::GeoDataType::GDT_COALSEAM);
		}

		CCoalSeamObject::~CCoalSeamObject()
		{

		}

		VirtualMine::SpatialInterface::IStyle* CCoalSeamObject::getStyle()
		{
			VirtualMine::SpatialInterface::IStyle* pStyle =  CGeoObject::getStyle();
			if (pStyle == NULL)
			{
				pStyle = new VirtualMine::Style::CCoalSeamStyle();
				CGeoObject::setStyle(pStyle,true);
				//delete pStyle;
			}
			return  CGeoObject::getStyle();
		}

		VirtualMine::SpatialInterface::IGeometry* CCoalSeamObject::getGeometry()
		{
			VirtualMine::SpatialInterface::IGeometry* pGeometry =  CGeoObject::getGeometry();
			if (pGeometry == NULL)
			{
				pGeometry = new  VirtualMine::Geometry::CCoalSeamGeometry();
				CGeoObject::setGeometry(pGeometry,true);
				// delete pStyle;
			}
			return  CGeoObject::getGeometry();
		}

		VirtualMine::SpatialInterface::IGeoProperty* CCoalSeamObject::getGeoProperty()
		{
			VirtualMine::SpatialInterface::IGeoProperty* pGeoProperty =  CGeoObject::getGeoProperty();
			if (pGeoProperty == NULL)
			{
				pGeoProperty = new VirtualMine::GeoProperty::CCoalSeamProperty();
				CGeoObject::setGeoProperty(pGeoProperty,true);
				//delete pStyle;
			}
			return  CGeoObject::getGeoProperty();
		}

		void CCoalSeamObject::fromFeature(VirtualMine::Database::IFeature* pFeature)
		{
			assert(pFeature);
			if (NULL == pFeature)
			{
				return;
			}
			void* pData = dynamic_cast<VirtualMine::Database::CCoalLayerFeature*>(pFeature)->getPropertySet()->getFields().at(0).getVarient().data();
			int* id = (int*)pData;
			int getID = *id;

			void* pData1 = dynamic_cast<VirtualMine::Database::CCoalLayerFeature*>(pFeature)->getPropertySet()->getFields().at(1).getVarient().data();
			char* name = (char*)pData1;

			void* pData2 = dynamic_cast<VirtualMine::Database::CCoalLayerFeature*>(pFeature)->getPropertySet()->getFields().at(2).getVarient().data();
			Ogre::uchar* blob = static_cast<Ogre::uchar*>(pData2);
			int legth = dynamic_cast<VirtualMine::Database::CCoalLayerFeature*>(pFeature)->getPropertySet()->getFields().at(2).getVarient().getLength();


			void* pData3 = dynamic_cast<VirtualMine::Database::CCoalLayerFeature*>(pFeature)->getPropertySet()->getFields().at(3).getVarient().data();
			Ogre::uchar* imagetexture = static_cast<Ogre::uchar*>(pData3);

			int texturelength = dynamic_cast<VirtualMine::Database::CCoalLayerFeature*>(pFeature)->getPropertySet()->getFields().at(3).getVarient().getLength();
			




			VirtualMine::Core::CVRDataStream ds;
			//VirtualMine::Core::CVRDataStream textureds;

			ds.wirteBlob(blob,legth);
			//textureds.wirteBlob(imagetexture,texturelength);

			ds.reseek(0);
			dynamic_cast<CCoalSeamProperty*>(this->getGeoProperty())->setName(name);
			dynamic_cast<CCoalSeamGeometry*>(this->getGeometry())->fromStream(ds);
			
			////dynamic_cast<CCoalSeamGeometry*>(this->getGeometry())->set
#if 0
			/*	Ogre::DataStreamPtr dsptr;
			dsptr->write(pData3,texturelength);*/

			void *pMem = (void *)new unsigned char[texturelength]; 
			memset(pMem, 0, texturelength); 
			memcpy(pMem,pData3,texturelength); 

			//  把这些放入一个新创建的MemoryDataStream 
			Ogre::DataStreamPtr dsptr(new Ogre::MemoryDataStream(pMem, texturelength)); 

		
			Ogre::Image image;
		
			//image.load(dsptr);
			image.loadDynamicImage(imagetexture,10,10,Ogre::PixelFormat::PF_A8B8G8R8);

		
			/*std::string textname = VirtualMine::MathEngine::CMathCalculator::getCurrentDir();		
			textname += "\\vrmineresourcegroup\\minetexture\\coalseam2.jpg";
			*/
			
			std::string textname = "C:\\Users\\Administrator\\Desktop\\test.jpg";
			
			image.save(textname);


#endif 
			

	/*		char buffer2[1024] = "0";

			sprintf(buffer2, "%s", pData3);

			FILE *fp2;
			std::string outname = "C:\\Users\\Administrator\\Desktop\\outCoalFile.jpg";

			fp2 = fopen(outname.c_str(), "wb");

			if(fp2 != NULL)
			{
				size_t ret = fwrite(pData2, sizeof(char), legth, fp2);
				fclose(fp2);
			}


			CCoalSeamStyle* style = new CCoalSeamStyle();
			style->setTexture(outname);
			this->setStyle(style,true);*/
		
			
		
		}

	

		VirtualMine::Database::IFeature* CCoalSeamObject::toFeature()
		{

			std::string name = dynamic_cast<CCoalSeamProperty*>(this->getGeoProperty())->getName();
			
			VirtualMine::Core::CVRDataStream datastream;
			static_cast<CCoalSeamGeometry*>(this->getGeometry())->toStream(datastream);

			datastream.reseek(0);
			VirtualMine::Database::IFeature* coalLayerfeature = new VirtualMine::Database::CCoalLayerFeature();
			
			
			coalLayerfeature->setFieldName(name);
			coalLayerfeature->setFieldBlob(datastream.getData(),datastream.getLength());
		
			//test
		/*	ArchiveFactory *mFileSystemArchiveFactory = new FileSystemArchiveFactory();
			ArchiveManager::getSingleton().addArchiveFactory( mFileSystemArchiveFactory );
			FileSystemArchive *pFileSystem = static_cast<FileSystemArchive *>(m_ArchiveMgr.load("../Media", "FileSystem"));
			StringVectorPtr pStrVectorFileSystem = pFileSystem->list(true);
*/
			//Ogre::Image image;

#if 0 
			std::string imagename = VirtualMine::MathEngine::CMathCalculator::getCurrentDir();
			//std::string imagename = "E:\\vr-mine_2_0_project\\Project\\04Implement\\code\\bin\\Debug";
			imagename += "\\vrmineresourcegroup\\minetexture";   ///不加文件名
		
			std::string loadname = imagename + "\\coalseam.jpg";

			Ogre::FileSystemArchive file(imagename,"FileSystem");
			Ogre::DataStreamPtr dsPtr = file.open("coalseam.jpg");	
			dsPtr->seek(0);

			Ogre::Image image;
			image.load("coalseam.jpg",Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);
			Ogre::uchar* imagedata = image.getData();
            int imagesize =  image.getSize();
		

   //         //size_t s = dsPtr.getPointer()->size();
			//size_t s =  dsPtr->size();
   //         Ogre::uchar *pBuf = new Ogre::uchar[s];
   //        // dsPtr.getPointer()->read(static_cast<void *>(pBuf), s);
			//dsPtr->read(pBuf, s);
			
			coalLayerfeature->setFieldTexture(imagedata,imagesize);
#endif

			////C++读取图片
#if 0 
		
			FILE *fp;
			long filesize = 0;
			char * ffile;

			std::string textname = VirtualMine::MathEngine::CMathCalculator::getCurrentDir();			
			textname += "\\vrmineresourcegroup\\minetexture";   ///不加文件名
			textname = textname + "\\coalseam.jpg";
		
			fp = fopen(textname.c_str(), "rb");

			if(fp != NULL)
			{
				fseek(fp, 0, SEEK_END);
				filesize = ftell(fp);
				fseek(fp, 0, SEEK_SET);

				ffile = new char[filesize+1];
				size_t sz = fread(ffile, sizeof(char), filesize+1, fp);

				fclose(fp);

			}
			coalLayerfeature->setFieldTexture((Ogre::uchar*)ffile,filesize);
#endif

			return coalLayerfeature;		
			
		}
	}
}
