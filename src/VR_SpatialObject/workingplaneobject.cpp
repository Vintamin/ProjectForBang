//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : workingplaneobject.cpp
//  @ Date : 2014/10/26
//  @ Author : 王凯
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description 

#include "vrmine/vr_spatialobject/mine/workingplaneobject.h"
#include "vrmine/vr_core/geodatatype.h"
#include "vrmine/vr_geometry/geometry/surface.h"
#include "vrmine/vr_databaseengine/database/workingplanefeature.h"
#include "vrmine/vr_geometry/geometry/workingplane.h"
#include "vrmine/vr_spatialobject/mine/workingplaneproperty.h"

using namespace VirtualMine::Database;

using namespace VirtualMine::SpatialInterface;
using namespace VirtualMine::Geometry;


namespace VirtualMine
{
	namespace Mine
	{
		CWorkingplaneObject::CWorkingplaneObject()
		{
			this->setType(VirtualMine::Core::GeoDataType::GDT_WORKINGPLANE);
		}

		CWorkingplaneObject::~CWorkingplaneObject()
		{

		}

		VirtualMine::SpatialInterface::IStyle* CWorkingplaneObject::getStyle()
		{
			//VirtualMine::SpatialInterface::IStyle* pStyle =  CGeoObject::getStyle();
			//if (pStyle == NULL)
			//{
			//	pStyle = new VirtualMine::Style::CDrillHoleStyle();
			//	CGeoObject::setStyle(pStyle,true);
			//	//delete pStyle;
			//}
			return  CGeoObject::getStyle();
		}

		VirtualMine::SpatialInterface::IGeometry* CWorkingplaneObject::getGeometry()
		{
			VirtualMine::SpatialInterface::IGeometry* pGeometry =  CGeoObject::getGeometry();
			if (pGeometry == NULL)
			{
				pGeometry = new VirtualMine::Geometry::CWorkingplaneGeometry();
				CGeoObject::setGeometry(pGeometry,true);			    

			}
			return  CGeoObject::getGeometry();
		}

		VirtualMine::SpatialInterface::IGeoProperty* CWorkingplaneObject::getGeoProperty()
		{
			//VirtualMine::SpatialInterface::IGeoProperty* pGeoProperty =  CGeoObject::getGeoProperty();
			//if (pGeoProperty == NULL)
			//{
			//	pGeoProperty = new VirtualMine::GeoProperty::CDrillProperty();
			//	CGeoObject::setGeoProperty(pGeoProperty,true);
			//	//delete pStyle;
			//}
			return  CGeoObject::getGeoProperty();
		}


		void CWorkingplaneObject::fromFeature(VirtualMine::Database::IFeature* pFeature)
		{
			assert(pFeature);
			if (NULL == pFeature)
			{
			return;
			}
			void* pData = static_cast<VirtualMine::Database::CWorkingplaneFeature*>(pFeature)->getPropertySet()->getFields().at(0).getVarient().data();
			int* id = (int*)pData;
			int getID = *id;

			void* pData1 = static_cast<VirtualMine::Database::CWorkingplaneFeature*>(pFeature)->getPropertySet()->getFields().at(1).getVarient().data();
			char* name = (char*)pData1;

			void* pData2 = static_cast<VirtualMine::Database::CWorkingplaneFeature*>(pFeature)->getPropertySet()->getFields().at(2).getVarient().data();
			Ogre::uchar* blob = static_cast<Ogre::uchar*>(pData2);
			int legth = static_cast<VirtualMine::Database::CWorkingplaneFeature*>(pFeature)->getPropertySet()->getFields().at(2).getVarient().getLength();

			VirtualMine::Core::CVRDataStream ds;	
			ds.wirteBlob(blob,legth);
			ds.reseek(0);


			static_cast<CWorkingplaneGeometry*>(this->getGeometry())->fromStream(ds);

			std::string objectname = name;
			this->setName(objectname);		
		//	dynamic_cast<VirtualMine::GeoProperty::CWorkingplaneProperty*>(this->getGeoProperty())->setName(objectname);


			
		}

		VirtualMine::Database::IFeature* CWorkingplaneObject::toFeature()
		{
			 
			VirtualMine::Core::CVRDataStream datastream;

			static_cast<CWorkingplaneGeometry*>(this->getGeometry())->toStream(datastream);
	
			datastream.reseek(0);

			VirtualMine::Database::IFeature* workingplanefeature = new VirtualMine::Database::CWorkingplaneFeature();

			workingplanefeature->setFieldID(1);
			workingplanefeature->setFieldName( this->getName());
			workingplanefeature->setFieldBlob(datastream.getData(),datastream.getLength());
			
			return workingplanefeature;		

		}

	}

}
