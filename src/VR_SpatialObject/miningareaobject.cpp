//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : miningareaobject.cpp
//  @ Date : 2014/8/6
//  @ Author : 朱炜鹏
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#include "vrmine/vr_spatialobject/mine/miningareaobject.h"
#include "vrmine/vr_core/geodatatype.h"
#include "vrmine/vr_style/style/miningareastyle.h"
#include "vrmine/vr_geometry/geometry/miningarea.h"
#include "vrmine/vr_spatialobject/geoproperty/miningareaproperty.h"
#include "vrmine/vr_geometry/geometry/coalseam.h"
#include "vrmine/vr_spatialobject/geoproperty/coalseamproperty.h"
#include "vrmine/vr_mathenine/mathengine/mathcalculator.h"
#include <fstream>
namespace VirtualMine
{
	namespace Mine
	{
		CMiningAreaObject::CMiningAreaObject()
		{
			this->setType(VirtualMine::Core::GeoDataType::GDT_MININGAREA);
		}

		CMiningAreaObject::~CMiningAreaObject()
		{

		}

		VirtualMine::SpatialInterface::IStyle* CMiningAreaObject::getStyle()
		{
			VirtualMine::SpatialInterface::IStyle* pStyle =  CGeoObject::getStyle();
			if (pStyle == NULL)
			{
				pStyle = new VirtualMine::Style::CMiningAreaStyle();
				CGeoObject::setStyle(pStyle,true);
				//delete pStyle;
			}
			return  CGeoObject::getStyle();
		}

		VirtualMine::SpatialInterface::IGeometry* CMiningAreaObject::getGeometry()
		{
			VirtualMine::SpatialInterface::IGeometry* pGeometry =  CGeoObject::getGeometry();
			if (pGeometry == NULL)
			{
				pGeometry = new  VirtualMine::Geometry::CMiningAreaGeometry();
				CGeoObject::setGeometry(pGeometry,true);
				// delete pStyle;
			}
			return  CGeoObject::getGeometry();
		}

		VirtualMine::SpatialInterface::IGeoProperty* CMiningAreaObject::getGeoProperty()
		{
			VirtualMine::SpatialInterface::IGeoProperty* pGeoProperty =  CGeoObject::getGeoProperty();
			if (pGeoProperty == NULL)
			{
				pGeoProperty = new VirtualMine::GeoProperty::CMiningAreaProperty();
				CGeoObject::setGeoProperty(pGeoProperty,true);
				//delete pStyle;
			}
			return  CGeoObject::getGeoProperty();
		}

		//void CMiningAreaObject::createTexture(CCoalSeamObject* coalobject)
		//{
		//	static ULONG_PTR m_gdiplusToken;
		//	Gdiplus::GdiplusStartupInput gdiplusStartupInput;
		//	Gdiplus::GdiplusStartup(&m_gdiplusToken, &gdiplusStartupInput, NULL); 

		//	VirtualMine::Geometry::CCoalSeamGeometry* coalGeometry =(VirtualMine::Geometry::CCoalSeamGeometry*) coalobject->getGeometry();
		//	VirtualMine::Geometry::CPoint upLeftPt;
		//	VirtualMine::Geometry::CPoint downRightPt;
		//	coalGeometry->computeRectangle(upLeftPt,downRightPt);
		//	float width = downRightPt.getX() - upLeftPt.getX();
		//	float height = downRightPt.getZ() - upLeftPt.getZ();

		//	Bitmap* bit = new Bitmap(width,height);
		//	Graphics imageGraphics(bit); 

		//	SolidBrush backgroundBrush(Color(0,255,255,255));
		//	imageGraphics.FillRectangle(&backgroundBrush,(float)0,(float)0,width,height);
		//	SolidBrush greenBrush(Color(80,0,250,0));
		//	Point points[4];
		//	points[0] = Point(40,40);
		//	points[1] = Point(2400,60);
		//	points[2] = Point(2100,1500);
		//	points[3] = Point(80,1400);
		//	imageGraphics.FillPolygon(&greenBrush,points,4,FillMode::FillModeWinding);
		//	imageGraphics.SetTextRenderingHint(TextRenderingHintAntiAlias);
		//	WCHAR string[ ] = L"第一采区";                   //要写的字
		//	FontFamily fontFamily(L"宋体"); 
		//	Gdiplus::Font myFont(&fontFamily, 400, FontStyleRegular, UnitPoint); //第二个是字体大小
		//	SolidBrush blackBrush(Color(255, 230, 200, 0));  //半透明+文字RGB颜色
		//	PointF school_site((REAL)100, (REAL)300);//文字放置的像素坐标
		//	StringFormat format;                         
		//	format.SetAlignment(StringAlignmentNear);    //文本排列方式，即在对应位置居中、靠左、靠右
		//	imageGraphics.DrawString(string, wcslen(string), &myFont, school_site, &format, &blackBrush );//把string绘制到图上

		//	CLSID pngClsid; 
		//	getEncoderClsid( L"image/png", &pngClsid); 
		//	std::string dir = VirtualMine::MathEngine::CMathCalculator::getCurrentDir();
		//	std::string name = dir+"\\media\\materials\\textures\\miningArea222.png";
		//	WCHAR* imgName = VirtualMine::MathEngine::CMathCalculator::stringToWCHAR(name);
		//	bit->Save(imgName, &pngClsid, NULL );//保存添加了汉字的图像	

		//	VirtualMine::GeoProperty::CCoalSeamProperty* pro = (VirtualMine::GeoProperty::CCoalSeamProperty* )coalobject->getGeoProperty();
		//	Ogre::MaterialPtr material = Ogre::MaterialManager::getSingletonPtr()->getByName(pro->getName());
		//	Ogre::Pass* pass = material->getTechnique(0)->createPass();
		//	pass->setCullingMode(Ogre::CULL_NONE);
		//	pass->setSceneBlending(Ogre::SBT_TRANSPARENT_ALPHA);
		//	Ogre::TextureUnitState* te = pass->createTextureUnitState("miningArea222.png");
	
		//	//Gdiplus::GdiplusShutdown(m_gdiplusToken);
		//}

		void CMiningAreaObject::createTexture(CCoalSeamObject* coalobject)
		{
			static ULONG_PTR m_gdiplusToken;
			Gdiplus::GdiplusStartupInput gdiplusStartupInput;
			Gdiplus::GdiplusStartup(&m_gdiplusToken, &gdiplusStartupInput, NULL); 

			VirtualMine::Geometry::CCoalSeamGeometry* coalGeometry =(VirtualMine::Geometry::CCoalSeamGeometry*) coalobject->getGeometry();
			VirtualMine::GeoProperty::CCoalSeamProperty* coalProperty = (VirtualMine::GeoProperty::CCoalSeamProperty*) coalobject->getGeoProperty();

			VirtualMine::Geometry::CMiningAreaGeometry* miningAreaGeometry = (VirtualMine::Geometry::CMiningAreaGeometry*)this->getGeometry();
			VirtualMine::Style::CMiningAreaStyle* miningAreaStyle = (VirtualMine::Style::CMiningAreaStyle*)this->getStyle();
			VirtualMine::GeoProperty::CMiningAreaProperty* miningAreaProperty = (VirtualMine::GeoProperty::CMiningAreaProperty*)this->getGeoProperty();

			if (miningAreaGeometry->getCount() == 0)
			{
				return;
			}

			VirtualMine::Geometry::CPoint upLeftPt;
			VirtualMine::Geometry::CPoint downRightPt;
			coalGeometry->computeRectangle(upLeftPt,downRightPt);
			float width = downRightPt.getX() - upLeftPt.getX();
			float height = downRightPt.getZ() - upLeftPt.getZ();

			std::string pngFilePath = VirtualMine::MathEngine::CMathCalculator::getCurrentDir() + "\\media\\materials\\textures\\" + coalProperty->getName() + "_MiningArea.png";
			std::string tempFile = VirtualMine::MathEngine::CMathCalculator::getCurrentDir() + "\\media\\materials\\textures\\" + coalProperty->getName() + "_TempMiningArea.png";
			std::fstream _file;
			_file.open(pngFilePath.c_str(),std::ios::in);
			if (!_file)
			{
				Bitmap* bit = new Bitmap(width,height);
				Graphics bitGraphics(bit); 
				SolidBrush backgroundBrush(Color(10,255,255,255));
				bitGraphics.FillRectangle(&backgroundBrush,(float)0,(float)0,width,height);

				CLSID pngClsid; 
				getEncoderClsid( L"image/png", &pngClsid); 
				WCHAR* imgName = VirtualMine::MathEngine::CMathCalculator::stringToWCHAR(pngFilePath);
				bit->Save(imgName, &pngClsid, NULL );//保存添加了汉字的图像	
				delete bit;
			}
			_file.close();

			int a = VirtualMine::MathEngine::CMathCalculator::CopyFile(pngFilePath.c_str(),tempFile.c_str());
		
			{
				Bitmap* png = new Bitmap(VirtualMine::MathEngine::CMathCalculator::stringToWCHAR(tempFile));
				Graphics imageGraphics(png); 
				Point* pts = new Point();
				for (int i = 0; i<miningAreaGeometry->getCount();i++)
				{
					VirtualMine::Geometry::CPoint tempPoint = miningAreaGeometry->getPoint(i);
					pts[i] = Point(tempPoint.getX()-upLeftPt.getX(),tempPoint.getZ()-upLeftPt.getZ());
				}

				PointF textPos;
				float textSize;
				Point leftUpPt = pts[0];
				Point rightDownPt = pts[0];
				for (int i = 0; i<miningAreaGeometry->getCount();i++)
				{
					if (pts[i].X < leftUpPt.X) leftUpPt.X = pts[i].X;
					if (pts[i].Y < leftUpPt.Y) leftUpPt.Y = pts[i].Y;
					if (pts[i].X > rightDownPt.X) rightDownPt.X = pts[i].X;
					if (pts[i].Y > rightDownPt.Y) rightDownPt.Y = pts[i].Y;	
				}
				float areaWidth = rightDownPt.X - leftUpPt.X;
				float areaHeight = rightDownPt.Y - leftUpPt.Y;
				
				textSize = areaWidth / (miningAreaProperty->getName().length() + 2);
				textPos.X = leftUpPt.X + 2*textSize;
				textPos.Y = leftUpPt.Y + areaHeight / 2.0 - textSize/2.0;

				SolidBrush greenBrush(Color(80,0,250,0));
				imageGraphics.FillPolygon(&greenBrush,pts,miningAreaGeometry->getCount(),FillMode::FillModeWinding);
				imageGraphics.SetTextRenderingHint(TextRenderingHintAntiAlias);

				WCHAR* string = VirtualMine::MathEngine::CMathCalculator::stringToWCHAR(miningAreaProperty->getName()); 
				FontFamily fontFamily(L"宋体"); 
				Gdiplus::Font myFont(&fontFamily, textSize, FontStyleRegular, UnitPoint); //第二个是字体大小
				SolidBrush blackBrush(Color(255, 230, 200, 0));  //半透明+文字RGB颜色
				PointF school_site((REAL)500, (REAL)600);//文字放置的像素坐标

				StringFormat format;                         
				format.SetAlignment(StringAlignmentNear);    //文本排列方式，即在对应位置居中、靠左、靠右
				imageGraphics.DrawString(string, wcslen(string), &myFont, textPos, &format, &blackBrush );//把string绘制到图上

				CLSID pngClsid; 
				getEncoderClsid( L"image/png", &pngClsid); 
				WCHAR* imgName = VirtualMine::MathEngine::CMathCalculator::stringToWCHAR(pngFilePath);
				Gdiplus::Status saveResult = png->Save(imgName, &pngClsid, NULL );//保存添加了汉字的图像
				imageGraphics.~Graphics();
				delete png;

				WCHAR* TempImgName = VirtualMine::MathEngine::CMathCalculator::stringToWCHAR(tempFile);
				bool deleteRestult = DeleteFile(TempImgName);
			
				Ogre::MaterialPtr material = Ogre::MaterialManager::getSingletonPtr()->getByName(coalProperty->getName());
				Ogre::Pass* pass = material->getTechnique(0)->getPass(1);
				Ogre::TextureUnitState* textureUnite = pass->getTextureUnitState(0);
				textureUnite->setTextureName(coalProperty->getName() + "_MiningArea.png");
			}
			Gdiplus::GdiplusShutdown(m_gdiplusToken);
		}
		
		int CMiningAreaObject::getEncoderClsid(const WCHAR* format, CLSID* pClsid)
		{
			UINT num= 0;
			UINT size= 0;

			ImageCodecInfo* pImageCodecInfo= NULL;

			GetImageEncodersSize(&num, &size);
			if(size== 0)
			{
				return -1;
			}
			pImageCodecInfo= (ImageCodecInfo*)(malloc(size));
			if(pImageCodecInfo== NULL)
			{
				return -1;
			}

			GetImageEncoders(num, size, pImageCodecInfo);

			for(UINT j=0; j< num; ++j)
			{
				if(wcscmp(pImageCodecInfo[j].MimeType, format)== 0)
				{
					*pClsid= pImageCodecInfo[j].Clsid;
					free(pImageCodecInfo);
					return j;
				}
			}

			free(pImageCodecInfo);
			return -1;
		}
	}
}
