//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : igeoobject.cpp
//  @ Date : 2014/8/6
//  @ Author : 朱炜鹏
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#include "vrmine/vr_spatialobject/geoproperty/drillproperty.h"
#include <OGRE/Ogre.h>
using namespace Ogre;
namespace VirtualMine
{
	namespace GeoProperty
	{
		#pragma region 地层实现

		CStratum::CStratum()
		{

		}

		CStratum::~CStratum()
		{

		}

		void CStratum::setDepth(const float& depth)
		{
			this->mDepth = depth;
		}
		float CStratum::getDepth()
		{
			return this->mDepth;
		}

		void CStratum::setDescription(const std::string& description)
		{
			this->mDescription = description;
		}

		std::string CStratum::getDeccription()
		{
			return this->mDescription;
		}

		void CStratum::setAge(const std::string& age)
		{
			this->mAge = age;
		}

		std::string CStratum::getAge()
		{	
			return this->mAge;
		}

		 
		void CStratum::setFeatureInfo(const std::string& featureinfo)
		{
			this->mFeatureInfo = featureinfo;
		}

		std::string CStratum::getFeatureInfo()
		{
			return this->mFeatureInfo;
		}

		void VirtualMine::GeoProperty::CStratum::fromStream(VirtualMine::Core::CVRDataStream& datastream)
		{
			
			datastream.readString(mAge);
			datastream.readReal(mDepth);
			///mDepth += 80;
			datastream.readString(mDescription);
			datastream.readString(mFeatureInfo);
		}

		void CStratum::toStream(VirtualMine::Core::CVRDataStream& datastream)
		{
			
			datastream.wirteString(mAge);
			datastream.wirteReal(mDepth);
			datastream.wirteString(mDescription);
			datastream.wirteString(mFeatureInfo);
		}

#pragma endregion 

		#pragma region 钻孔属性实现
		CDrillProperty::CDrillProperty()
		{

		}

		CDrillProperty::~CDrillProperty()
		{
			if (this->mStratum.size()>0)
			{
				std::vector<VirtualMine::GeoProperty::CStratum*>::iterator itr = this->mStratum.begin();
				std::vector<VirtualMine::GeoProperty::CStratum*>::iterator itrEnd = this->mStratum.end();
				while (itr != itrEnd)
				{
					delete (*itr);
					++itr;
				}

				this->mStratum.clear();
			}
			
		}

		void CDrillProperty::setName(const std::string& name)
		{
			this->mName = name;
		}

		std::string CDrillProperty::getName()
		{
			return this->mName;
		}

		void CDrillProperty::setRadius(float radius)
		{
			this->mRadius = radius;
		}

		float CDrillProperty::getRadius()
		{
			return this->mRadius;
		}


		VirtualMine::SpatialInterface::IGeoProperty* CDrillProperty::clone()
		{
			return NULL;
		}

		void CDrillProperty::addStratum(VirtualMine::GeoProperty::CStratum* stratum)
		{
			this->mStratum.push_back(stratum);
		}

		VirtualMine::GeoProperty::CStratum* CDrillProperty::getStratum(const int& index)
		{
			return this->mStratum[index];
		}

		int CDrillProperty::getStratumCount()
		{
			return this->mStratum.size();
		}

		void CDrillProperty::toStream(VirtualMine::Core::CVRDataStream& datastream)
		{
			//datastream.wirteString(mName);
			datastream.wirteReal(mRadius);
			int stratumcount = this->getStratumCount();
			datastream.wirteInt32(stratumcount);

			for (int i = 0; i < stratumcount; i++)
			{
				this->getStratum(i)->toStream(datastream);
			}
		}

		void CDrillProperty::fromStream(VirtualMine::Core::CVRDataStream& datastream)
		{
			//datastream.readString(mName);
			datastream.readReal(mRadius);
			int strumcount(0);
			datastream.readInt32(strumcount);
			for (int i = 0; i < strumcount; i++)
			{
				CStratum* straum = new CStratum();
				straum->fromStream(datastream);
				this->addStratum(straum);
			}

		}

		std::string CDrillProperty::toString()
		{
			std::string result("");

			result.append("钻孔名称： ");
			result.append(this->getName());
			result.append("   半径： ");  
			result.append(Ogre::StringConverter::toString(this->getRadius(),10));
			result.append("\n");
			result.append("岩性分布：\n");
			for (int i = 0;i < this->getStratumCount();i++)
			{
				CStratum* tempStratum = this->getStratum(i);
				result.append(tempStratum->getDeccription());
				result.append("   ");
				result.append(Ogre::StringConverter::toString(tempStratum->getDepth(),10));
				result.append("\n");
			}
			return result;
		}

		#pragma endregion 
	}
}
