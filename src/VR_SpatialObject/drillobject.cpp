//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : igeoobject.cpp
//  @ Date : 2014/8/6
//  @ Author : 朱炜鹏
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#include "vrmine/vr_spatialobject/mine/drillobject.h"
#include "vrmine/vr_core/geodatatype.h"
#include "vrmine/vr_style/style/drillholestyle.h"
#include "vrmine/vr_geometry/geometry/drillhole.h"
#include "vrmine/vr_spatialobject/geoproperty/drillproperty.h"
#include "vrmine/vr_databaseengine/database/drillingfeature.h"
#include "vrmine/vr_core/variant.h"
#include "vrmine/vr_spatialinterface/iscene.h"

using namespace VirtualMine::GeoProperty;
using namespace VirtualMine::Database;
using namespace VirtualMine::Style;
using namespace VirtualMine::SpatialInterface;
using namespace VirtualMine::Geometry;
using namespace VirtualMine::Core;

namespace VirtualMine
{
	namespace Mine
	{
		CDrillObject::CDrillObject()
		{
			this->setType(VirtualMine::Core::GeoDataType::GDT_DRILL);
		}

		CDrillObject::~CDrillObject()
		{

		}

		VirtualMine::SpatialInterface::IStyle* CDrillObject::getStyle()
		{
			VirtualMine::SpatialInterface::IStyle* pStyle =  CGeoObject::getStyle();
			if (pStyle == NULL)
			{
				pStyle = new VirtualMine::Style::CDrillHoleStyle();
				CGeoObject::setStyle(pStyle,true);
				//delete pStyle;
			}
			return  CGeoObject::getStyle();
		}

		VirtualMine::SpatialInterface::IGeometry* CDrillObject::getGeometry()
		{
			VirtualMine::SpatialInterface::IGeometry* pGeometry =  CGeoObject::getGeometry();
			if (pGeometry == NULL)
			{
				pGeometry = new  VirtualMine::Geometry::CDrillHoleGeometry();
				CGeoObject::setGeometry(pGeometry,true);
				// delete pStyle;
			}
			return  CGeoObject::getGeometry();
		}

		VirtualMine::SpatialInterface::IGeoProperty* CDrillObject::getGeoProperty()
		{
			VirtualMine::SpatialInterface::IGeoProperty* pGeoProperty =  CGeoObject::getGeoProperty();
			if (pGeoProperty == NULL)
			{
				pGeoProperty = new VirtualMine::GeoProperty::CDrillProperty();
				CGeoObject::setGeoProperty(pGeoProperty,true);
				//delete pStyle;
			}
			return  CGeoObject::getGeoProperty();
		}


		void CDrillObject::fromFeature(VirtualMine::Database::IFeature* pFeature)
		{
			assert(pFeature);
			if (NULL == pFeature)
			{
				return;
			}

			void* pData1 = static_cast<VirtualMine::Database::CDrillingFeature*>(pFeature)->getPropertySet()->getFields().at(1).getVarient().data();
			char* name = (char*)pData1;

			void* pData2 = static_cast<VirtualMine::Database::CDrillingFeature*>(pFeature)->getPropertySet()->getFields().at(2).getVarient().data();
			double* posX = (double*)pData2;

			void* pData3 = static_cast<VirtualMine::Database::CDrillingFeature*>(pFeature)->getPropertySet()->getFields().at(3).getVarient().data();
			double* posY = (double*)pData3;

			void* pData4 = static_cast<VirtualMine::Database::CDrillingFeature*>(pFeature)->getPropertySet()->getFields().at(4).getVarient().data();
			double* posZ = (double*)pData4;
			
			void* pData5 =  static_cast<VirtualMine::Database::CDrillingFeature*>(pFeature)->getPropertySet()->getFields().at(5).getVarient().data();
			Ogre::uchar* pGeoLayerInfo = static_cast<Ogre::uchar*>(pData5);			
		////////
			int legth = static_cast<VirtualMine::Database::CDrillingFeature*>(pFeature)->getPropertySet()->getFields().at(5).getVarient().getLength();
			//legth = 2000;
			VirtualMine::Core::CVRDataStream ds;	
			ds.wirteBlob(pGeoLayerInfo,legth);
			ds.reseek(0);
			//VirtualMine::Geometry::CDrillHoleGeometry* drillGeometry = new VirtualMine::Geometry::CDrillHoleGeometry(x.toDouble()-37540800.035836,y.toDouble()-301.217,z.toDouble()-3062804.241);	
			static_cast<CDrillProperty*>(this->getGeoProperty())->setName(name);
#if 0
			static_cast<CDrillHoleGeometry*>(this->getGeometry())->setX(*posX - IScene::ReferenceCenter.x);
			static_cast<CDrillHoleGeometry*>(this->getGeometry())->setY(*posY);
			static_cast<CDrillHoleGeometry*>(this->getGeometry())->setZ(*posZ - IScene::ReferenceCenter.z);
#else
			static_cast<CDrillHoleGeometry*>(this->getGeometry())->setX(*posX - IScene::ReferenceCenter.x);
			static_cast<CDrillHoleGeometry*>(this->getGeometry())->setY(*posY - IScene::ReferenceCenter.y);
			static_cast<CDrillHoleGeometry*>(this->getGeometry())->setZ((*posZ - IScene::ReferenceCenter.z) * IScene::CoefficientOfCoordinateTransform);
#endif
			static_cast<CDrillProperty*>(this->getGeoProperty())->fromStream(ds);

		}

		VirtualMine::Database::IFeature* CDrillObject::toFeature()
		{
		   			std::string name = this->getName();				
			//std::string name = static_cast<CDrillProperty*>(this->getGeoProperty())->getName();

			//float radius = static_cast<CDrillProperty*>(this->getGeoProperty())->getRadius();
			
			CVRDataStream datastream;
			static_cast<CDrillProperty*>(this->getGeoProperty())->toStream(datastream);
			datastream.reseek(0);

			

			//VirtualMine::Core::CVRDataStream datastream;
			double posX = static_cast<CDrillHoleGeometry*>(this->getGeometry())->getX();
			double posY = static_cast<CDrillHoleGeometry*>(this->getGeometry())->getY();
			double posZ = static_cast<CDrillHoleGeometry*>(this->getGeometry())->getZ();
			
			//datastream.reseek(0);
			VirtualMine::Database::CDrillingFeature* feature = new VirtualMine::Database::CDrillingFeature();
			feature->setFieldName(name);
			feature->setFieldPositionX(posX);
			feature->setFieldPositionY(posY);
			feature->setFieldPositionZ(posZ);	
			feature->setFieldBlob(datastream.getData(),datastream.getLength());

			return dynamic_cast<VirtualMine::Database::IFeature* >(feature);

		}

	}

}
