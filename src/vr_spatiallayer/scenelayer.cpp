//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : scenelayer.cpp
//  @ Date : 2014/7/6
//  @ Author : 盛佳良
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#include "vrmine\vr_spatiallayer\scenelayer.h"
#include "OGRE\OgreVector3.h"
#include "vrmine/vr_spatialengine/geoscenemanager.h"
#include "OGRE/OgreSceneNode.h"


using namespace VirtualMine::SpatialInterface;

namespace VirtualMine
{
	namespace SpatialLayer
	{

		CSceneLayer::CSceneLayer()
			:mpRenderableObject(NULL),ref_mpDataSet(NULL),
			ref_mpGeoSceneManager(NULL),mpStyle(NULL),
			ref_mpGeoSpatialScene(NULL),mVisible(true),mSelectable(true),
			mName("defaultLayer"),mpNode(NULL),mHasInitialised(false),
			mHasRenderToScene(false)
		{
			this->mNeedLabel = false;
			this->mBoundingBox = Ogre::AxisAlignedBox::BOX_NULL;
			this->mLabelMaxRenderDistance = 2000;
			this->mLabelMinRenderDistance = 50;
			this->mLayerMaxRenderDistance = 2000;
			this->mLayerMinRenderDistance = 50;
		}

		CSceneLayer::~CSceneLayer()
		{
			if (this->mTextNodes.size() > 0)
			{
				for (size_t i = 0; i < this->mTextNodes.size(); ++i)
				{
					Ogre::SceneNode* pNode = this->mTextNodes[i];
					//暂时这么处理

					for (size_t j = 0; j < pNode->numAttachedObjects();++j)
					{
						this->ref_mpGeoSceneManager->destroyManualObject(pNode->getAttachedObject(j)->getName());
					}
					if (pNode->getParentSceneNode())
					{
						pNode->getParentSceneNode()->removeAndDestroyChild(pNode->getName());
					}
					
				}
				this->mTextNodes.clear();
			}

			if (mpRenderableObject != NULL)
			{
				delete mpRenderableObject;
				mpRenderableObject = NULL;
			}
		  

			if (mpStyle != NULL)
			{
				delete mpStyle;
				mpStyle = NULL;
			}

			if (mpNode != NULL)
			{
				this->ref_mpGeoSceneManager->destroySceneNode(mpNode);
				mpNode = NULL;
			} 
			
			
		}

		

		void CSceneLayer::setFrameMode(bool isFrameMode)
		{

		}

		void CSceneLayer::toStream()
		{
			
		}

		void CSceneLayer::fromStream()
		{

		}

		std::string CSceneLayer::getName()
		{
			return this->mName;
		}

		void CSceneLayer::setName(const std::string& name)
		{
			this->mName = name;
		}

		void CSceneLayer::setScene(VirtualMine::SpatialInterface::IScene* pScene)
		{
			this->ref_mpGeoSpatialScene = pScene;
		}
		
		VirtualMine::SpatialInterface::IScene* CSceneLayer::getScene()
		{
			return this->ref_mpGeoSpatialScene;
		}

		bool CSceneLayer::contains(const double& x,const double& z)
		{
			Ogre::Vector3 maxCoor = this->mBoundingBox.getMaximum();
			Ogre::Vector3 minCoor = this->mBoundingBox.getMinimum();
			if (x < minCoor.x || x > maxCoor.x
				|| z < minCoor.z || z > maxCoor.z)
			{
				return false;
			}
			return true;
		}

		bool CSceneLayer::getSelectable()
		{
			return this->mSelectable;
		}
		
		void CSceneLayer::setSelectable(const bool& value)
		{
			this->mSelectable = value;
		}

		bool CSceneLayer::getVisible()
		{
			return this->mVisible;
		}

		void CSceneLayer::setBoundingBox(const Ogre::AxisAlignedBox& boundingBox)
		{
			this->mBoundingBox = boundingBox;
		}

		Ogre::AxisAlignedBox& CSceneLayer::getBoundingBox()
		{
			return this->mBoundingBox;
		}

		void CSceneLayer::setGeoSceneManager(Ogre::SceneManager* ref_pSceneManager)
		{
			this->ref_mpGeoSceneManager = ref_pSceneManager;
		}

		Ogre::SceneManager* CSceneLayer::getGeoSceneManager()
		{
			return this->ref_mpGeoSceneManager;
		}

		void CSceneLayer::setStyle(VirtualMine::SpatialInterface::IStyle* pStyle)
		{
			throw std::exception();
		}

		VirtualMine::SpatialInterface::IStyle* CSceneLayer::getStyle()
		{
			return this->mpStyle;
		}

		void CSceneLayer::setVisible(const bool& value)
		{
			this->mVisible = value;
			if (this->mpNode)
			{
				this->mpNode->setVisible(mVisible);
			} 
			std::vector<Ogre::SceneNode*> pTextNodes = this->getTextNodes();
			if (pTextNodes.size() > 0)
			{
				for(int i = 0; i < pTextNodes.size();i++)
				{
					pTextNodes.at(i)->setVisible(this->mVisible);

				}
			}
		}

		void CSceneLayer::draw()
		{
			/*this->initialise();*/
			if (NULL != this->mpRenderableObject
				&& NULL != this->mpRenderableObject->getNode())
			{
				//kk
				this->mpRenderableObject->render();
				if (this->mpNode)
				{
					this->mpNode->addChild(this->mpRenderableObject->getNode());
				}
			}
		}

		void CSceneLayer::update()
		{
			
		}

		void CSceneLayer::initialise()
		{
			if (this->mpNode == NULL
				&& this->ref_mpGeoSceneManager)
			{
				this->mpNode = this->ref_mpGeoSceneManager->getRootSceneNode()->createChildSceneNode();
				this->mpNode->setVisible(this->mVisible);
			}
			this->mHasInitialised = true;
		}

		void CSceneLayer::setLayerMaxRenderDistance(const double& value)
		{
			this->mLayerMaxRenderDistance = value;
		}

		double CSceneLayer::getLayerMaxRenderDistance()
		{
			return this->mLayerMaxRenderDistance;	
		}
		void CSceneLayer::setLayerMinRenderDistance(const double& value)
		{
			this->mLayerMinRenderDistance = value;
		}
		double CSceneLayer::getLayerMinRenderDistance()
		{
			return this->mLayerMinRenderDistance;
		}
		void CSceneLayer::setNeedLabel(const bool& needLabel)
		{
			this->mNeedLabel = needLabel;
		}
		bool CSceneLayer::getNeedLabel()
		{
			return this->mNeedLabel;
		}
		void CSceneLayer::setLabelMaxRenderDistance(const double& value)
		{
			this->mLabelMaxRenderDistance = value;
		}
		double CSceneLayer::getLabelMaxRenderDistance()
		{
			return this->mLabelMaxRenderDistance;
		}
		void CSceneLayer::setLabelMinRenderDistance(const double& value)
		{
			this->mLabelMinRenderDistance = value;
		}
		double CSceneLayer::getLabelMinRenderDistance()
		{
			return this->mLabelMinRenderDistance;
		}

		void CSceneLayer::notifyUpdate()
		{
			if (this->mNeedLabel && this->mTextNodes.size() > 0)
			{
				Ogre::Vector3 camPos = ((VirtualMine::SpatialEngine::CGeoSceneManager*)this->ref_mpGeoSceneManager)->getDefaultCamera()->getPosition();
				std::vector<Ogre::SceneNode*>::iterator itr = this->mTextNodes.begin();
				std::vector<Ogre::SceneNode*>::iterator itrEnd = this->mTextNodes.end();
				while (itr != itrEnd)
				{
					Ogre::SceneNode* sceneNode = dynamic_cast<Ogre::SceneNode*>(*itr);
					Ogre::Vector3 textPos = sceneNode->getPosition();
					Ogre::Real distance = (camPos - textPos).length();
					Ogre::Real scale = distance * ((VirtualMine::SpatialEngine::CGeoSceneManager*)this->ref_mpGeoSceneManager)->getDefaultCamera()->getPixelDisplayRatio();
					sceneNode->setScale(scale,scale,scale);
					if (distance < this->mLabelMaxRenderDistance 
						&& distance > this->mLabelMinRenderDistance)
					{ 
						if (mVisible)
						{
							sceneNode->setVisible(true);
						}
					}
					else
					{
						sceneNode->setVisible(false);
					}
					++itr;
				}
			}
		}

		void CSceneLayer::setType(const std::string& type)
		{
			this->mType = type;
		}

		std::string CSceneLayer::getType()
		{
			return this->mType;
		}

		VirtualMine::Database::IDataset* CSceneLayer::getDataSet()
		{
			return this->ref_mpDataSet;
		}

		void CSceneLayer::setDataSet(VirtualMine::Database::IDataset* pDataSet)
		{
			this->ref_mpDataSet = pDataSet;
		}

		void CSceneLayer::getGeoObjects(VirtualMine::SpatialInterface::GeoObjectVector& geoObjects)
		{
			if (!this->mGeoObjects.empty())
			{
				GeoObjectVector::iterator bItr = this->mGeoObjects.begin();
				GeoObjectVector::iterator eItr = this->mGeoObjects.end();
				while (bItr != eItr)
				{
					geoObjects.push_back(*bItr);
					++bItr;
				}
			}
		}

		void CSceneLayer::resetResource()
		{

		}

		VirtualMine::SpatialInterface::IGeoObject* CSceneLayer::getGeoObject( const std::string& name )
		{
			IGeoObject* igeobject = NULL;

			
			if (!this->mGeoObjects.empty())
			{
				GeoObjectVector::iterator bItr = this->mGeoObjects.begin();
				GeoObjectVector::iterator eItr = this->mGeoObjects.end();
				while (bItr != eItr)
				{
					igeobject = *bItr;
					std::string lanename =  igeobject->getName();
					if (name == igeobject->getName() )
					{
						return igeobject;
					}
					
					++bItr;
				}
			}
		}

		VirtualMine::SpatialInterface::IRenderableObject* CSceneLayer::getRenderableObject()
		{
			return mpRenderableObject;
		}

		VirtualMine::SpatialInterface::GeoObjectVector CSceneLayer::getGeoObjectVector()
		{
			return mGeoObjects;
		}

		void CSceneLayer::setDatasource( VirtualMine::Database::IDataSource* pDatasoure )
		{
			this->ref_mpDatabase = pDatasoure;
		}

		VirtualMine::Database::IDataSource* CSceneLayer::getDatabase()
		{
			return ref_mpDatabase;
		}

		std::vector<Ogre::SceneNode*> CSceneLayer::getTextNodes()
		{
			return mTextNodes;
		}

	}
}
