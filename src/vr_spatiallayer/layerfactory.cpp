//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : ilayer.cpp
//  @ Date : 2014/7/6
//  @ Author : 盛佳良
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 

#include "vrmine\vr_spatialinterface\ilayer.h"
#include "vrmine\vr_spatiallayer\layerfactory.h"
#include "vrmine/vr_core/geodatatype.h"
#include "vrmine\vr_spatiallayer\lanwaylayer.h"
#include "vrmine\vr_spatiallayer\demlayer.h"
#include "vrmine\vr_spatiallayer\imagelayer.h"
#include "vrmine\vr_spatiallayer\drilllayer.h"
#include "vrmine\vr_spatiallayer\coallayer.h"
#include "vrmine\vr_spatiallayer\drilllayer.h"
#include "vrmine\vr_spatiallayer\miningarealayer.h"
#include "vrmine\vr_spatiallayer\modellayer.h"
#include "vrmine\vr_spatiallayer\workingplanelayer.h"
#include "vrmine\vr_spatiallayer\faultlayer.h"
#include "vrmine\vr_spatiallayer\terranelayer.h"
#include "vrmine\vr_spatiallayer\shotholelayer.h"
#include "vrmine\vr_spatiallayer\lanewaySectiongForBangLayer.h"
#include "vrmine\vr_spatiallayer\escaperoutelayer.h"
#include "vrmine\vr_spatiallayer\conprogresslayer.h"

using namespace VirtualMine::Core;
using namespace VirtualMine::SpatialInterface;

namespace VirtualMine
{
	namespace SpatialLayer
	{

		CLaneWayLayerFactory::CLaneWayLayerFactory()
		{

		}

		CLaneWayLayerFactory::~CLaneWayLayerFactory()
		{

		}

		ILayer* CLaneWayLayerFactory::createInstance(const std::string& name)
		{
			ILayer* pLayer = new CLanewayLayer();
			pLayer->setName(name);
			return pLayer;
		}

		void CLaneWayLayerFactory::destroyInstance(ILayer* pLayer)
		{
			assert(pLayer);
			SAFE_DELETE(pLayer);
		}

		std::string CLaneWayLayerFactory::getType()
		{
			return GeoDataType::GDT_LANWAY;
		}



		CWorkingplaneLayerFactory::CWorkingplaneLayerFactory()
		{

		}

		CWorkingplaneLayerFactory::~CWorkingplaneLayerFactory()
		{

		}




		ILayer* CWorkingplaneLayerFactory::createInstance(const std::string& name)
		{
			ILayer* pLayer = new CWorkingplaneLayer();
			pLayer->setName(name);
			return pLayer;
		}

		void CWorkingplaneLayerFactory::destroyInstance(ILayer* pLayer)
		{
			assert(pLayer);
			SAFE_DELETE(pLayer);
		}

		std::string CWorkingplaneLayerFactory::getType()
		{
			return GeoDataType::GDT_WORKINGPLANE;
		}





		CLayerFactoryRegister* CLayerFactoryRegister::mpSingletonPtr(NULL);

		CLayerFactoryRegister::~CLayerFactoryRegister()
		{

		}

		CLayerFactoryRegister* CLayerFactoryRegister::getSingletonPtr()
		{
			if (NULL == mpSingletonPtr)
			{
				mpSingletonPtr = new CLayerFactoryRegister();
			}
			return mpSingletonPtr;
		}

		CLayerFactoryRegister& CLayerFactoryRegister::getSingleton()
		{
			if (NULL == mpSingletonPtr)
			{
				mpSingletonPtr = new CLayerFactoryRegister();
			}
			return *mpSingletonPtr;
		}

		CLayerFactoryRegister::CLayerFactoryRegister()
		{

		}



		CImageLayerFactory::CImageLayerFactory()
		{

		}

		CImageLayerFactory::~CImageLayerFactory()
		{

		}

		ILayer* CImageLayerFactory::createInstance(const std::string& name)
		{
			ILayer* pLayer = new CImageLayer();
			pLayer->setName(name);
			return pLayer;
		}

		void CImageLayerFactory::destroyInstance(ILayer* pLayer)
		{
			assert(pLayer);
			SAFE_DELETE(pLayer);
		}

		std::string CImageLayerFactory::getType()
		{
			return GeoDataType::GDT_IMAGE;
		}

		CDemLayerFactory::CDemLayerFactory()
		{

		}

		CDemLayerFactory::~CDemLayerFactory()
		{

		}

		ILayer* CDemLayerFactory::createInstance(const std::string& name)
		{
			ILayer* pLayer = new CDemLayer();
			pLayer->setName(name);
			return pLayer;
		}

		void CDemLayerFactory::destroyInstance(ILayer* pLayer)
		{
			assert(pLayer);
			SAFE_DELETE(pLayer);
		}

		CDrillLayerFactory::CDrillLayerFactory()
		{

		}

		CDrillLayerFactory::~CDrillLayerFactory()
		{

		}

		VirtualMine::SpatialInterface::ILayer* CDrillLayerFactory::createInstance(const std::string& name)
		{
			ILayer* pLayer = new CDrillLayer();
			pLayer->setName(name);
			return pLayer;
		}

		std::string CDrillLayerFactory::getType()
		{
			return VirtualMine::Core::GeoDataType::GDT_DRILL;
		}

		std::string CDemLayerFactory::getType()
		{
			return GeoDataType::GDT_DEM;
		}

		CMiningAreaLayerFactory::CMiningAreaLayerFactory()
		{

		}
		CMiningAreaLayerFactory::~CMiningAreaLayerFactory()
		{

		}

		VirtualMine::SpatialInterface::ILayer* CMiningAreaLayerFactory::createInstance(const std::string& name)
		{
			ILayer* pLayer = new CMiningAreaLayer();
			pLayer->setName(name);
			return pLayer;
		}

		std::string CMiningAreaLayerFactory::getType()
		{
			return VirtualMine::Core::GeoDataType::GDT_MININGAREA;
		}

		CTerraneLayerFactory::CTerraneLayerFactory()
		{

		}

		CTerraneLayerFactory::~CTerraneLayerFactory()
		{

		}

		VirtualMine::SpatialInterface::ILayer* CTerraneLayerFactory::createInstance(const std::string& name)
		{
			ILayer* pLayer = new CTerraneLayer();
			pLayer->setName(name);
			return pLayer;
		}

		std::string CTerraneLayerFactory::getType()
		{
			return VirtualMine::Core::GeoDataType::GDT_TERRANE;
		}

		void CTerraneLayerFactory::destroyInstance(VirtualMine::SpatialInterface::ILayer* pLayer)
		{
			SAFE_DELETE(pLayer);
		}


		CCoalLayerFactory::CCoalLayerFactory()
		{

		}

		CCoalLayerFactory::~CCoalLayerFactory()
		{

		}

		VirtualMine::SpatialInterface::ILayer* CCoalLayerFactory::createInstance(const std::string& name)
		{
			ILayer* pLayer = new CCoalLayer();
			pLayer->setName(name);
			return pLayer;
		}

		std::string CCoalLayerFactory::getType()
		{
			return VirtualMine::Core::GeoDataType::GDT_COALSEAM;
		}


		CModelLayerFactory::CModelLayerFactory()
		{

		}

		CModelLayerFactory::~CModelLayerFactory()
		{

		}
		VirtualMine::SpatialInterface::ILayer* CModelLayerFactory::createInstance(const std::string& name)
		{
			ILayer* pLayer = new CModelLayer();
			pLayer->setName(name);
			return pLayer;
		}
		void CModelLayerFactory::destroyInstance(VirtualMine::SpatialInterface::ILayer* pLayer)
		{
			SAFE_DELETE(pLayer);
		}

		std::string CModelLayerFactory::getType()
		{
			return VirtualMine::Core::GeoDataType::GDT_MODEL;
		}

		CFaultLayerFactory::CFaultLayerFactory()
		{

		}

		CFaultLayerFactory::~CFaultLayerFactory()
		{

		}

		VirtualMine::SpatialInterface::ILayer* CFaultLayerFactory::createInstance( const std::string& name )
		{
			ILayer* pLayer = new CFaultLayer();
			pLayer->setName(name);
			return pLayer;
		}

		void CFaultLayerFactory::destroyInstance( VirtualMine::SpatialInterface::ILayer* pLayer )
		{
			SAFE_DELETE(pLayer);
		}

		std::string CFaultLayerFactory::getType()
		{
			return VirtualMine::Core::GeoDataType::GDT_FAULT;
		}


		CShotHoleLayerFactory::CShotHoleLayerFactory()
		{

		}

		CShotHoleLayerFactory::~CShotHoleLayerFactory()
		{

		}

		VirtualMine::SpatialInterface::ILayer* CShotHoleLayerFactory::createInstance( const std::string& name )
		{
			ILayer* pLayer = new CShotHoleLayer();
			pLayer->setName(name);
			return pLayer;
		}

		void CShotHoleLayerFactory::destroyInstance( VirtualMine::SpatialInterface::ILayer* pLayer )
		{
			SAFE_DELETE(pLayer);
		}

		std::string CShotHoleLayerFactory::getType()
		{
			return VirtualMine::Core::GeoDataType::GDT_SHOTHOLE;
		}


		CLanewaySectionForBangLayerFactory::CLanewaySectionForBangLayerFactory()
		{

		}

		CLanewaySectionForBangLayerFactory::~CLanewaySectionForBangLayerFactory()
		{

		}

		VirtualMine::SpatialInterface::ILayer* CLanewaySectionForBangLayerFactory::createInstance( const std::string& name )
		{
			ILayer* pLayer = new CLaneWaySectionForBangLayer();
			pLayer->setName(name);
			return pLayer;
		}

		void CLanewaySectionForBangLayerFactory::destroyInstance( VirtualMine::SpatialInterface::ILayer* pLayer )
		{
			SAFE_DELETE(pLayer);
		}

		std::string CLanewaySectionForBangLayerFactory::getType()
		{
			return VirtualMine::Core::GeoDataType::GDT_LANEWAYSECTION;

		}


		CEscpeRouteLayerFactory::CEscpeRouteLayerFactory()
		{

		}

		CEscpeRouteLayerFactory::~CEscpeRouteLayerFactory()
		{

		}

		VirtualMine::SpatialInterface::ILayer* CEscpeRouteLayerFactory::createInstance( const std::string& name )
		{
			ILayer* pLayer = new CEscapeRouteLayer();
			pLayer->setName(name);
			return pLayer;
		}

		void CEscpeRouteLayerFactory::destroyInstance( VirtualMine::SpatialInterface::ILayer* pLayer )
		{
			SAFE_DELETE(pLayer);
		}

		std::string CEscpeRouteLayerFactory::getType()
		{
			return VirtualMine::Core::GeoDataType::GDT_ESCAPEROUTE;

		}

		//kk施工进度
		CConProgressLayerFactory::CConProgressLayerFactory()
		{

		}

		CConProgressLayerFactory::~CConProgressLayerFactory()
		{

		}

		VirtualMine::SpatialInterface::ILayer* CConProgressLayerFactory::createInstance( const std::string& name )
		{
			ILayer* pLayer = new CConProgressLayer();
			pLayer->setName(name);
			return pLayer;
		}

		void CConProgressLayerFactory::destroyInstance( VirtualMine::SpatialInterface::ILayer* pLayer )
		{
			SAFE_DELETE(pLayer);
		}

		std::string CConProgressLayerFactory::getType()
		{
			return VirtualMine::Core::GeoDataType::GDT_CONPROGRESS;

		}

	}
}
