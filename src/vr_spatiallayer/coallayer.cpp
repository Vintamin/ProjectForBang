//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : CCoalLayer.cpp
//  @ Date : 2014/7/27
//  @ Author : 盛佳良
//
//

#include "vrmine\vr_spatiallayer\demlayer.h"
#include "vrmine/vr_spatiallayer/coallayer.h"
#include "vrmine/vr_databaseengine/database/ifeature.h"
#include "vrmine/vr_spatialinterface/igeoobject.h"
#include "vrmine/vr_spatialrender/spatialrender/coalseamrenderableobject.h"
#include <list>
#include "vrmine/vr_utility/objecttransformer.h"
#include "vrmine/vr_spatialobject/mine/coalseamobject.h"
#include "vrmine/vr_core/geodatatype.h"
#include "vrmine/vr_spatialobject/geoproperty/coalseamproperty.h"
#include "vrmine/vr_geometry/geometry/coalseam.h"
#include "vrmine/vr_style/style/coalseamstyle.h"
using namespace VirtualMine::Database;
using namespace VirtualMine::Base;
using namespace VirtualMine::SpatialRender;
using namespace VirtualMine::SpatialInterface;
using namespace VirtualMine::GeoProperty;
using namespace VirtualMine::Style;
using namespace VirtualMine::Mine;
using namespace VirtualMine::Geometry;

namespace VirtualMine
{
    namespace SpatialLayer
    {

		CCoalLayer::CCoalLayer()
		{
			this->mType = VirtualMine::Core::GeoDataType::GDT_COALSEAM;
		}

		CCoalLayer::~CCoalLayer()
		{
		}

		void CCoalLayer::update()
		{
		
		}

		void CCoalLayer::initialise()
		{
			
			assert(this->ref_mpDataSet);
			CCoalRenderableObject* pCoalObject = new CCoalRenderableObject();
						

			if (NULL == this->ref_mpDataSet)
				return;
			this->ref_mpGeoSceneManager = this->getScene()->getGeoSceneManager();
			CDemLayer* pDemLayer = dynamic_cast<CDemLayer*>(this->ref_mpGeoSpatialScene->getDemLayer());
			if (!pDemLayer)
			{
				return;
			}

			CCoalRenderableObject* pRenderableObject(NULL);
			int featureCount = this->ref_mpDataSet->getCount();//需要数据库引擎提供接口
			for (int i = 0 ; i < featureCount; ++i)
			{
				IFeature* pFeature = this->ref_mpDataSet->getFeature(i);
				VirtualMine::SpatialInterface::IGeoObject* pGeoObject = new VirtualMine::Mine::CCoalSeamObject();
				pGeoObject->fromFeature(pFeature);
				

				double demZ(0); 
				std::vector<CPoint> newPoints;
				CCoalSeamGeometry* coalGeometry = dynamic_cast<CCoalSeamGeometry*>(pGeoObject->getGeometry());
			    int count = coalGeometry->getCount();
#if 0			
				for (int i = 0; i < count; i++)
				{
					CPoint pointVec = coalGeometry->getPoint(i);
				    int z = pointVec.getZ();
				    z *= -1;
					pointVec.setZ(z);
					newPoints.push_back(pointVec);
				}

				CCoalSeamGeometry* pNewCoalGeometry = new CCoalSeamGeometry();
				int vecCount = newPoints.size();
				for (int j = 0; j < vecCount; j++)
				{
					pNewCoalGeometry->addPoint(newPoints.at(j));

				}
		        pGeoObject->setGeometry(pNewCoalGeometry,true);

#endif
#if 0
                CCoalSeamGeometry* pNewGeometry = new CCoalSeamGeometry();
			
				for (int i = 0; i < count; i++)
				{
					CPoint pointV = pNewCoalGeometry->getPoint(i);
					demZ = pDemLayer->getHeight(pointV.getX(),pointV.getZ());
					if (demZ < pointV.getY())
					{
						pointV.setY(demZ-1);
					}
					pNewGeometry->addPoint(pointV);

				}
			/*	delete coalGeometry;
				coalGeometry = NULL;*/
				pGeoObject->setGeometry(pNewGeometry,true);
#endif
				



				if(NULL == pRenderableObject)
					pRenderableObject = new  CCoalRenderableObject();
				pRenderableObject->addGeoObject(pGeoObject);
			}
			if (pRenderableObject)
			{
				if(NULL != this->mpRenderableObject)
				{
					this->mpRenderableObject->deRender();
					SAFE_DELETE(this->mpRenderableObject);
				}
				pRenderableObject->setGeoSceneManager(this->ref_mpGeoSceneManager);
				pRenderableObject->build();
				pRenderableObject->setNode(this->ref_mpGeoSceneManager->createSceneNode());
				this->mpRenderableObject = pRenderableObject;
			}
			CSceneLayer::initialise();
		}

		void CCoalLayer::notifyUpdate()
		{
			
		}

        void CCoalLayer::setFrameMode(bool isFrameMode)
		{
			Ogre::MaterialPtr material = Ogre::MaterialManager::getSingletonPtr()->getByName("pureMaterial",Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);

			if (!material.isNull())
			{
				Ogre::Pass* pass = material->getTechnique(0)->getPass(0);
				pass->setCullingMode(Ogre::CULL_NONE);
				pass->setPolygonMode(Ogre::PM_WIREFRAME);
				material->load();
			}

			if	(this->mpRenderableObject == NULL) return;
			CCoalRenderableObject* coalRenderableObject = dynamic_cast<CCoalRenderableObject*>(this->mpRenderableObject);
			if (coalRenderableObject == NULL)
			{
				return;
			}
			int objectCount = coalRenderableObject->getGeoObjectCount();
			for (int i = 0; i<objectCount; ++i)
			{
				CCoalSeamObject* coalObject = dynamic_cast<CCoalSeamObject*>(coalRenderableObject->getGeoObject(i));
				CCoalSeamProperty* coalPro = dynamic_cast<CCoalSeamProperty*>(coalObject->getGeoProperty());
				CCoalSeamStyle* coalStyle = dynamic_cast<CCoalSeamStyle*>(coalObject->getStyle());
				//CLaneWayLineGeometry* lanewayGeometry = dynamic_cast<CLaneWayLineGeometry*>(lanewayObject->getGeometry());
				//CLanewayStyle* lanewayStyle = dynamic_cast<CLanewayStyle*>(lanewayObject->getStyle());

				Ogre::ManualObject* renderObject = this->ref_mpGeoSceneManager->getManualObject(coalPro->getName());
				int count = renderObject->getNumSections();
				if (isFrameMode)
				{
					for (int j = 0; j< count; ++j)
					{
						renderObject->getSection(j)->setMaterialName("pureMaterial");
					}
				}
				else
				{
					for (int j = 0; j< count; ++j)
					{
						renderObject->getSection(j)->setMaterialName("coalMaterial");
					}
				}

			}
		}
    }
}
