//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : polygon.cpp
//  @ Date : 2014/7/6
//  @ Author : 盛佳良
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#include "vrmine\vr_geometry\geometry\polygon.h"
#include "vrmine/vr_spatialinterface/iscene.h"

using namespace VirtualMine::SpatialInterface;

namespace VirtualMine
{
	namespace Geometry
	{
		CPolygon::CPolygon()
		{
		
		}

		CPolygon::~CPolygon()
		{
		
		}

		void CPolygon::addPoint(CPoint& point)
		{
			this->mXCoors.push_back(point.getX());
			this->mYCoors.push_back(point.getY());
			this->mZCoors.push_back(point.getZ());
		}

		void CPolygon::addPoint(const double& x,const double& y,const double& z)
		{
			this->mXCoors.push_back(x);
			this->mYCoors.push_back(y);
			this->mZCoors.push_back(z);
		}

		size_t CPolygon::getCount()
		{
			return this->mXCoors.size();
		}

		CPoint CPolygon::getPoint(const size_t& index)
		{
			assert(index < this->mXCoors.size());
			CPoint p;
			p.setX(this->mXCoors[index]);
			p.setY(this->mYCoors[index]);
			p.setZ(this->mZCoors[index]);
			return p;
		}

		void CPolygon::removePoint(const size_t& index)
		{
			assert(index < this->mXCoors.size());
			this->mXCoors.erase(this->mXCoors.begin() + index);
			this->mYCoors.erase(this->mYCoors.begin() + index);
			this->mZCoors.erase(this->mZCoors.begin() + index);
		}

		void CPolygon::toStream(VirtualMine::Core::CVRDataStream& datastream)
		{

			int count = mXCoors.size();
			datastream.wirteInt32(count);
			for (int i = 0; i < mXCoors.size(); i++)
			{
				datastream.wirteReal(mXCoors[i]);
			}
			for (int i = 0; i < mYCoors.size(); i++)
			{
				datastream.wirteReal(mYCoors[i]);
			}
			for (int i = 0; i < mZCoors.size(); i++)
			{
				datastream.wirteReal(mZCoors[i]);
			}

		}
		void CPolygon::fromStream(VirtualMine::Core::CVRDataStream& datastream)
		{
			int length(0);
			datastream.readInt32(length);

			
			for (int i = 0; i < length; i++)
			{
				double posX; 
				datastream.readReal(posX);

				posX -=   IScene::ReferenceCenter.x; 
				this->mXCoors.push_back(posX);

			}
			for (int i = 0; i < length; i++)
			{

				double posY; 
				datastream.readReal(posY);
				posY -= IScene::ReferenceCenter.y;
				this->mYCoors.push_back(posY);
			}
			for (int i = 0; i < length; i++)
			{

				double posZ; 
				datastream.readReal(posZ);
				posZ -= IScene::ReferenceCenter.z; 
				//posZ *= IScene::CoefficientOfCoordinateTransform;
				this->mZCoors.push_back(posZ);
			}

		}

	}
}