//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : mathcalculator.cpp
//  @ Date : 2014/7/6
//  @ Author : 盛佳良
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#include "vrmine\vr_mathenine\mathengine\mathcalculator.h"
#include <iostream>
#include <fstream>
using namespace std;

namespace VirtualMine
{
	namespace MathEngine
	{
		void CMathCalculator::computeNormal()
		{

		}

		 float CMathCalculator::CalculateAngleOfTwoVector(Ogre::Vector3 v1,Ogre::Vector3 v2)
		{
			float angle;
			angle = Ogre::Math::ACos(v1.dotProduct(v2)/(v1.length()*v2.length())).valueRadians();
			if (v1.crossProduct(v2).y < 0)
			{
				angle *= -1.0f;
			}	
			return angle;
		}

		 float CMathCalculator::CalculateAzimuth(Ogre::Vector3 v)
		{
			float angle;
			Ogre::Vector3 forward = Ogre::Vector3::UNIT_Z;
			angle = Ogre::Math::ACos(forward.dotProduct(v)/(v.length())).valueRadians();
			if (forward.crossProduct(v).y < 0)
			{
				angle *= -1.0f;
			}	
			return angle;
		}

		 float  CMathCalculator::CalculateAngleOfPlane(Ogre::Vector3 v)
		 {
			 float angle;
			 Ogre::Vector3 v0 = v;
			 Ogre::Vector3 v1 = v;
			 v1.y = 0;
			 angle = CMathCalculator::CalculateAngleOfTwoVector(v0,v1);
			 angle = Ogre::Math::Abs(angle);
			 return angle;
		 }

		 WCHAR* CMathCalculator::getCurrentDirW()
		 {
			 WCHAR* fileDir = new WCHAR();
			 GetCurrentDirectory(512,fileDir);
			 return fileDir;
		 }
		 
		 std::string CMathCalculator::getCurrentDir()
		 {
			 std::string currentDir;
			 LPWSTR fileDir = new WCHAR();
			 GetCurrentDirectory(512,fileDir);
			 wstring_to_string(fileDir,currentDir);
			 return currentDir;
		 }

		 void CMathCalculator::getCurDirectory(std::string& dir)
		 {
			 LPWSTR fileDir = new WCHAR();
			 GetCurrentDirectory(512,fileDir); 
		
			 wstring_to_string(fileDir,dir);
		 }

		 WCHAR* CMathCalculator::stringToWCHAR(std::string source)
		 {
			 int mystringSize = (int)(source.length()+1);
			 WCHAR* mywstring = new WCHAR[mystringSize];
			 MultiByteToWideChar( CP_ACP, 0, source.c_str(), -1, mywstring, mystringSize );
			 return mywstring;
		 }

		 int CMathCalculator::CopyFile(const char *SourceFile,const char *NewFile)
		 {
			 ifstream in;
			 ofstream out;
			 in.open(SourceFile,ios::binary);//打开源文件
			 if(in.fail())//打开源文件失败
			 {
				 cout<<"Error 1: Fail to open the source file."<<endl;
				 in.close();
				 out.close();
				 return 0;
			 }
			 out.open(NewFile,ios::binary);//创建目标文件 
			 if(out.fail())//创建文件失败
			 {
				 cout<<"Error 2: Fail to create the new file."<<endl;
				 out.close();
				 in.close();
				 return 0;
			 }
			 else//复制文件
			 {
				 out<<in.rdbuf();
				 out.close();
				 in.close();
				 return 1;
			 }
		 }

		 void CMathCalculator::wstring_to_string(const std::wstring& src, std::string& dest)
		 {
			 std::string tmp;
			 tmp.resize(src.size());
			 std::transform(src.begin(), src.end(), tmp.begin(), wctob);
			 tmp.swap(dest);
		 }

	}
}
