//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 二三维爆破信息仿真系统
//  @ File Name : CMap2DLayer.cpp
//  @ Date : 2015/8/1
//  @ Author : 
//
//


#include "vrmine/vr_maplayer/map2dlayer.h"
#include "vrmine/vr_maplayer/pointdrawitem.h"
#include "vrmine/vr_maplayer/linedrawitem.h"
#include "vrmine/vr_maplayer/textDrawItem.h"
#include "vrmine/vr_maplayer/polygondrawitem.h"
#include "vrmine/vr_maplayer/ellipsedrawitem.h"
#include "vrmine/vr_maplayer/shapeitem.h"
#include "vrmine/vr_maplayer/arcdrawitem.h"

namespace VirtualMine
{
	namespace Map
	{
		CMap2DLayer::CMap2DLayer()
		{
			this->mName = "defaultName";
		}

		CMap2DLayer::~CMap2DLayer()
		{
			if (this->mGeometryItems.size() > 0)
			{
				std::vector<IGeometryDrawItem*>::iterator bItr = this->mGeometryItems.begin();
				std::vector<IGeometryDrawItem*>::iterator eItr = this->mGeometryItems.end();
				while (bItr != eItr)
				{
					delete *bItr;
					++bItr;
				}
				this->mGeometryItems.clear();
			}
			
		}

		std::string CMap2DLayer::getName()
		{
			return this->mName;
		}
		void CMap2DLayer::setName(const std::string& name)
		{
			this->mName = name;
		}

		IGeometryDrawItem* CMap2DLayer::addGeometryItem(const IGeometryDrawItem::EGeometryItemType& type)
		{
			IGeometryDrawItem* pItem = NULL;
			if (type == IGeometryDrawItem::EGIT_POINT)
			{
				pItem = new CPointDrawItem();
			}
			else if (type == IGeometryDrawItem::EGIT_LINE)
			{
				pItem = new CLineDrawItem();
			}
			else if (type == IGeometryDrawItem::EGIT_POLYGON)
			{
				pItem = new CPolygonDrawItem();
			}
			else if (type == IGeometryDrawItem::EGIT_TEXT)
			{
				pItem = new CTextDrawItem();
			}
			else if (type == IGeometryDrawItem::EGIT_ARC)
			{
				pItem = new CArcDrawItem();
			}
			this->mGeometryItems.push_back(pItem);

			return pItem;
		}
		
		IGeometryDrawItem* CMap2DLayer::getGeometryItem(const std::string& geometryName)
		{
			if (this->mGeometryItems.size() > 0)
			{
				std::vector<IGeometryDrawItem*>::iterator bItr = this->mGeometryItems.begin();
				std::vector<IGeometryDrawItem*>::iterator eItr = this->mGeometryItems.end();
				while (bItr != eItr)
				{
					CShapeItem* pShapeItem = (CShapeItem*)(*bItr);
					if (pShapeItem->getName() == geometryName)
					{
						return *bItr;
					}
					++bItr;
				}
			}
			return NULL;
		}

		void CMap2DLayer::removeGeometryItem(const std::string& geometryName)
		{
			if (this->mGeometryItems.size() > 0)
			{
				std::vector<IGeometryDrawItem*>::iterator bItr = this->mGeometryItems.begin();
				std::vector<IGeometryDrawItem*>::iterator eItr = this->mGeometryItems.end();
				while (bItr != eItr)
				{
					CShapeItem* pShapeItem = (CShapeItem*)(*bItr);
					if (pShapeItem->getName() == geometryName)
					{
						delete *bItr;
						this->mGeometryItems.erase(bItr);
						return;
					}
					++bItr;
				}
			}
		}

		void CMap2DLayer::notifyUpdate() {

		}

		void CMap2DLayer::setHighlightColor() 
		{

		}

		void CMap2DLayer::getHighlightColor() 
		{

		}

		bool CMap2DLayer::pointSelect(const QPointF& mousePrjPos,const double& tolerance)
		{
			bool r = false;
			if (this->getVisible())
			{
				for (size_t i = 0; i < this->mGeometryItems.size();++i)
				{
					CShapeItem* pShapeItem = (CShapeItem*)(this->mGeometryItems[i]);
					if (pShapeItem)
					{
						r |= pShapeItem->pointSelect(mousePrjPos,tolerance);
					}
				}
			}
			return r;
		}


		bool CMap2DLayer::draw(QPainter& painter,
			const int& viewWidth,const int& viewHeight,
			const QPointF& viewLeftTopPosition,
			const QPointF& viewRightBottomPosition,
			const float& curScale)
		{
			bool r = false;
			if (this->getVisible())
			{
				QPixmap curLayerImage(viewWidth,viewHeight);
				curLayerImage.fill(Qt::transparent);//kk设置背景颜色为黑色透明
				QPainter curRenderPainter(&curLayerImage);//kk指定QPixmap的对象作为绘图对象
				for (size_t i = 0; i < this->mGeometryItems.size();++i)
				{
					if(this->mGeometryItems[i]->draw(curRenderPainter,viewWidth,viewHeight,
						viewLeftTopPosition,viewRightBottomPosition,curScale))
					{
						r = true;
					}
				}
				this->mLayerImage = curLayerImage;
			}
			return r;
		}

		QPixmap& CMap2DLayer::getLayerImage()
		{
			return this->mLayerImage;
		}

		void CMap2DLayer::computeBoundingBox()
		{

		}

		void CMap2DLayer::setVisible(const bool& value)
		{
		
		}

	}}

