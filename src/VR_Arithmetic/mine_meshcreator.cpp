//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : mine_meshcreator.cpp
//  @ Date : 2014/8/5
//  @ Author : 朱炜鹏
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#include "vrmine/vr_arithmetic/arithmetic/mine_meshcreator.h"
#include "vrmine/vr_core/geodatatype.h"
#include "vrmine/vr_spatialobject/mine/mineobject.h"
#include "vrmine/vr_spatialobject/geoproperty/mineproperty.h"
#include "vrmine/vr_spatialinterface/parameter.h"
#include "vrmine/vr_geometry/geometry/mine.h"
#include "vrmine/vr_style/style/minestyle.h"
namespace VirtualMine
{
	namespace Arithmetic
	{
		CMine_MeshCreator::CMine_MeshCreator()
		{
			this->setType(VirtualMine::Core::GeoDataType::GDT_MINE);
		}

		CMine_MeshCreator::~CMine_MeshCreator()
		{

		}

		void CMine_MeshCreator::createData(VirtualMine::SpatialInterface::GeoObjectVector& geoObjectVector,std::vector<VirtualMine::SpatialInterface::CGeoExtentionData*>& geoExtentionDatas)
		{
			if (geoObjectVector.size() == 0)
			{
				return;
			}
			VirtualMine::Mine::CMineObject* mineObject = dynamic_cast<VirtualMine::Mine::CMineObject*>(geoObjectVector[0]);
			VirtualMine::GeoProperty::CMineProperty* pro = dynamic_cast<VirtualMine::GeoProperty::CMineProperty*>(mineObject->getGeoProperty());
			VirtualMine::Geometry::CMineGeometry* geometry = dynamic_cast<VirtualMine::Geometry::CMineGeometry*>(mineObject->getGeometry());
			VirtualMine::Style::CMineStyle* style = dynamic_cast<VirtualMine::Style::CMineStyle*>(mineObject->getStyle());

			Ogre::MaterialPtr material = Ogre::MaterialManager::getSingletonPtr()->create(pro->getName() + "_material",Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);

			if (!material.isNull())
			{
				Ogre::Pass* pass = material->getTechnique(0)->getPass(0);
				pass->setAmbient(style->getMineColor());
				//pass->setLightingEnabled(true);
				//pass->setDiffuse(style->getMineColor());
				pass->setCullingMode(Ogre::CULL_NONE);
	
				material->load();
			}

			VirtualMine::SpatialInterface::CGeoExtentionData* data = new VirtualMine::SpatialInterface::CGeoExtentionData();
			Ogre::ManualObject* renderObject = this->ref_mpSceneMgr->createManualObject(pro->getName());
			data->setExtentionData(renderObject);

			Ogre::Any any((VirtualMine::Core::CBaseObject*)mineObject);
			renderObject->setUserAny(any);

			renderObject->begin(pro->getName() + "_material", Ogre::RenderOperation::OT_TRIANGLE_LIST);
			Ogre::Vector3 centerPt(geometry->getX(),geometry->getY(),geometry->getZ());
			int count = 60;
			Ogre::Vector3 axis(0,1,0);
			float angle = 2 * Ogre::Math::PI / (count - 1) ;	
			Ogre::Vector3 direction(pro->getRadius(),0,0);
			for (int i = 0 ; i < count; i++)
			{
				Ogre::Quaternion q;
				q.FromAngleAxis(Ogre::Radian(i * angle),axis);
				Ogre::Vector3 normalV  = q * direction;
				normalV.normalise();
				Ogre::Vector3 upPoint = q * direction + centerPt;
				renderObject->position(upPoint);
				renderObject->normal(normalV);
				Ogre::Vector3 downPoint = upPoint + Ogre::Vector3(0,-pro->getHeight(),0);
				renderObject->position(downPoint);
				renderObject->normal(normalV);
			}

			for (int i = 0;i<count-1;i++)
			{
				renderObject->triangle(i*2,i*2+1,(i+1)*2);
				renderObject->triangle(i*2+1,(i+1)*2+1,(i+1)*2);
			}

			renderObject->end();
			geoExtentionDatas.push_back(data);

		}
	}
}