//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : mine_meshcreator.cpp
//  @ Date : 2014/10/25
//  @ Author : 王凯
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 

#include <comdef.h>
#include <GdiPlus.h>
using namespace Gdiplus;
#pragma comment(lib, "gdiplus.lib")

#include "vrmine/vr_arithmetic/arithmetic/miningarea_meshcreator.h"
#include "vrmine/vr_core/geodatatype.h"
#include "vrmine/vr_spatialobject/mine/miningareaobject.h"
#include "vrmine/vr_spatialobject/geoproperty/miningareaproperty.h"
#include "vrmine/vr_spatialinterface/parameter.h"
#include "vrmine/vr_geometry/geometry/miningarea.h"
#include "vrmine/vr_style/style/miningareastyle.h"



namespace VirtualMine
{
	namespace Arithmetic
	{
		CMiningArea_MeshCreator::CMiningArea_MeshCreator()
		{			
			this->setType(VirtualMine::Core::GeoDataType::GDT_WORKINGPLANE);
		}

		CMiningArea_MeshCreator::~CMiningArea_MeshCreator()
		{

		}

		void CMiningArea_MeshCreator::createData(VirtualMine::SpatialInterface::GeoObjectVector& geoObjectVector,std::vector<VirtualMine::SpatialInterface::CGeoExtentionData*>& geoExtentionDatas)
		{
			if (geoObjectVector.size() == 0)
			{
				return;
			}
			VirtualMine::Mine::CMiningAreaObject* miningaeraObject = dynamic_cast<VirtualMine::Mine::CMiningAreaObject*>(geoObjectVector[0]);
			VirtualMine::GeoProperty::CMiningAreaProperty* pro = dynamic_cast<VirtualMine::GeoProperty::CMiningAreaProperty*>(miningaeraObject->getGeoProperty());
			VirtualMine::Geometry::CMiningAreaGeometry* geometry = dynamic_cast<VirtualMine::Geometry::CMiningAreaGeometry*>(miningaeraObject->getGeometry());
			VirtualMine::Style::CMiningAreaStyle* style = dynamic_cast<VirtualMine::Style::CMiningAreaStyle*>(miningaeraObject->getStyle());

			Ogre::MaterialPtr material = Ogre::MaterialManager::getSingletonPtr()->create(pro->getName() + "_material",Ogre::ResourceGroupManager::DEFAULT_RESOURCE_GROUP_NAME);

			if (!material.isNull())
			{
				Ogre::Pass* pass = material->getTechnique(0)->getPass(0);
				//pass->setAmbient(style->getFillColor());
				
				//pass->setLightingEnabled(true);
				//pass->setDiffuse(style->getMineColor());
				pass->setCullingMode(Ogre::CULL_NONE);

				material->load();
			}

			VirtualMine::SpatialInterface::CGeoExtentionData* data = new VirtualMine::SpatialInterface::CGeoExtentionData();
			
			Ogre::ManualObject* renderObject = this->ref_mpSceneMgr->createManualObject(pro->getName());
			data->setExtentionData(renderObject);

			renderObject->begin(pro->getName() + "_material", Ogre::RenderOperation::OT_TRIANGLE_LIST);
			
			int count = geometry->getCount();
			
		
			for (int i = 0 ; i < count; i++)
			{
					
	
				renderObject->position(geometry->getPoint(i).getX(),geometry->getPoint(i).getY(),geometry->getPoint(i).getZ());
				//renderObject->textureCoord()
	
			}

			for (int i = 0;i<count-1;i++)
			{
				//renderObject->triangle(i*2,i*2+1,(i+1)*2);
				//renderObject->triangle(i*2+1,(i+1)*2+1,(i+1)*2);
				renderObject->triangle(0,i+1,i+2);
			}

			renderObject->end();


			geoExtentionDatas.push_back(data);

		}
	}
}