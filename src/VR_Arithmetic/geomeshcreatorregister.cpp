//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : geomeshcreatorregister.cpp
//  @ Date : 2014/7/6
//  @ Author : 盛佳良
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#include "vrmine\vr_arithmetic\arithmetic\geomeshcreatorregister.h"
using namespace VirtualMine::SpatialInterface;


namespace VirtualMine
{
	namespace Arithmetic
	{
		CGeoMeshCreatorRegister* CGeoMeshCreatorRegister::mpSingletonPtr(NULL);
		CGeoMeshCreatorRegister::CGeoMeshCreatorRegister()
		{
		
		}

		CGeoMeshCreatorRegister::~CGeoMeshCreatorRegister()
		{
		
		}

		bool CGeoMeshCreatorRegister::registerGeoMeshCreator(IGeoMeshCreator* pGeoMeshCreator)
		{
			assert(pGeoMeshCreator);
			if (NULL == pGeoMeshCreator)
				return false;

			GeoMeshCreatorMap::iterator itr = this->mGeoMeshCreatorMap.find(pGeoMeshCreator->getType());
			if (itr == this->mGeoMeshCreatorMap.end())
			{
				this->mGeoMeshCreatorMap.insert(std::pair<std::string,IGeoMeshCreator*>(pGeoMeshCreator->getType(),pGeoMeshCreator));
				return true;
			}
			return false;
		}

		bool CGeoMeshCreatorRegister::unRegisterGeoMeshCreator(const std::string& type)
		{
			this->mGeoMeshCreatorMap.erase(type);
			return true;
		}

		IGeoMeshCreator* CGeoMeshCreatorRegister::getGeoMeshCreator(const std::string& type)
		{
			GeoMeshCreatorMap::iterator itr = this->mGeoMeshCreatorMap.find(type);
			if (itr != this->mGeoMeshCreatorMap.end())
			{
				return itr->second;
			}
			return NULL;
		}

		CGeoMeshCreatorRegister& CGeoMeshCreatorRegister::getSingleton()
		{
			if (NULL == mpSingletonPtr)
			{
				mpSingletonPtr = new CGeoMeshCreatorRegister();
			}
			return *mpSingletonPtr;
		}

		CGeoMeshCreatorRegister* CGeoMeshCreatorRegister::getSingletonPtr()
		{
			if (NULL == mpSingletonPtr)
			{
				mpSingletonPtr = new CGeoMeshCreatorRegister();
			}
			return mpSingletonPtr;
		}

	}
}
