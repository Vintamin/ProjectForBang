//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : drillrenderableobject.cpp
//  @ Date : 2014/8/6
//  @ Author :朱炜鹏
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#include "vrmine\vr_spatialrender\spatialrender\drillrenderableobject.h"
#include "vrmine/vr_arithmetic/arithmetic/geomeshcreatorregister.h"
#include "vrmine/vr_spatialinterface/igeometry.h"
#include "vrmine/vr_core/geodatatype.h"

using namespace VirtualMine::SpatialInterface;
using namespace VirtualMine::Arithmetic;
namespace VirtualMine
{
	namespace SpatialRender
	{
		CDrillRenderableObject::CDrillRenderableObject()
		{

		}

		CDrillRenderableObject::~CDrillRenderableObject()
		{
			//this->dispose();
		}

		void CDrillRenderableObject::setMaterialName(const std::string& materialName)
		{
			for (std::vector<CGeoExtentionData*>::iterator ite = this->mDataVector.begin();
				ite!=this->mDataVector.end();
				ite++)
			{
				CGeoExtentionData* geoExtentionData = (*ite);
				geoExtentionData->getExtentionData()->setMaterialName(0,materialName,VirtualMine::Core::VR_MINE_DEFAULT_RESOURCE_GROUP);
			}
		}

		void CDrillRenderableObject::dispose()
		{
			for (std::vector<CGeoExtentionData*>::iterator ite = this->mDataVector.begin();ite!=this->mDataVector.end();ite++)
			{
				CGeoExtentionData* geoExtentionData = (*ite);
				CGeoInstanceExtentionData* data = (CGeoInstanceExtentionData*) geoExtentionData; 

				Ogre::ManualObject* pManuObject = data->getExtentionData();
				pManuObject->detachFromParent();
				if (this->ref_mpGeoSceneManager)
				{
					this->ref_mpGeoSceneManager->destroyManualObject(pManuObject);
				}

			}
		}

		void CDrillRenderableObject::build()
		{
			if (this->mGeoObjectVector.size()<=0) return;
			VirtualMine::SpatialInterface::GeoObjectVector::iterator ite =  this->mGeoObjectVector.begin();
			IGeoObject* firstGeoObject = (*ite);
			IGeoMeshCreator* meshCreator = VirtualMine::Arithmetic::CGeoMeshCreatorRegister::getSingletonPtr()->getGeoMeshCreator(firstGeoObject->getType());

			if (meshCreator == NULL)
			{
				return;
			}
			meshCreator->createData(this->mGeoObjectVector,this->mDataVector);
		}

		void CDrillRenderableObject::render()
		{
			Ogre::SceneNode* sceneNode = dynamic_cast<Ogre::SceneNode*> (this->getNode());
			for (std::vector<CGeoExtentionData*>::iterator ite = this->mDataVector.begin();ite!=this->mDataVector.end();ite++)
			{
				CGeoExtentionData* geoExtentionData = (*ite);
				CGeoInstanceExtentionData* data = (CGeoInstanceExtentionData*) geoExtentionData; 
				
				sceneNode->createChildSceneNode()->attachObject(data->getExtentionData());

				//for (int i = 0;i<data->getCount();i++)
				//{
				//	Ogre::SceneNode* childNode = sceneNode->createChildSceneNode();
				//	childNode->attachObject(data->getExtentionData());
				//	childNode->scale(data->getParameter(i).getScale());
				//	childNode->translate(data->getParameter(i).getTranslate());
				//}
			}
		}

		void CDrillRenderableObject::deRender()
		{

		}
	}
}
