//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : surfacerenderableobject.cpp
//  @ Date : 2014/8/6
//  @ Author :朱炜鹏
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#include "vrmine\vr_spatialrender\spatialrender\coalseamrenderableobject.h"
#include "vrmine/vr_arithmetic/arithmetic/geomeshcreatorregister.h"

using namespace VirtualMine::Arithmetic;
using namespace VirtualMine::SpatialInterface;

namespace VirtualMine
{
	namespace SpatialRender
	{
		CCoalRenderableObject::CCoalRenderableObject()
		{

		}

		 CCoalRenderableObject::~CCoalRenderableObject()
		 {

		 }

		 void CCoalRenderableObject::build()
		 {
			 if (this->mGeoObjectVector.size()<=0) return;
			 VirtualMine::SpatialInterface::GeoObjectVector::iterator ite =  this->mGeoObjectVector.begin();
			 IGeoObject* firstGeoObject = (*ite);
			 IGeoMeshCreator* meshCreator = VirtualMine::Arithmetic::CGeoMeshCreatorRegister::getSingletonPtr()->getGeoMeshCreator(firstGeoObject->getType());

			 if (meshCreator == NULL)
			 {
				 return;
			 }
			 meshCreator->createData(this->mGeoObjectVector,this->mDataVector);
		 }

		 void CCoalRenderableObject::render()
		 {
			 Ogre::SceneNode* sceneNode = dynamic_cast<Ogre::SceneNode*> (this->getNode());
			 for (std::vector<CGeoExtentionData*>::iterator ite = this->mDataVector.begin();ite!=this->mDataVector.end();ite++)
			 {
				 CGeoExtentionData* geoExtentionData = (*ite);
				 CGeoInstanceExtentionData* data = (CGeoInstanceExtentionData*) geoExtentionData; 

				 sceneNode->createChildSceneNode()->attachObject(data->getExtentionData());
			 }
		 }

		 void CCoalRenderableObject::deRender()
		 {
			 for (std::vector<CGeoExtentionData*>::iterator ite = this->mDataVector.begin();ite!=this->mDataVector.end();ite++)
			 {
				 CGeoExtentionData* geoExtentionData = (*ite);
				 CGeoInstanceExtentionData* data = (CGeoInstanceExtentionData*) geoExtentionData; 

				 if (data->getExtentionData()->getParentNode())
				 {
					 data->getExtentionData()->detachFromParent();
				 }
			 }
		 }
	}
}
