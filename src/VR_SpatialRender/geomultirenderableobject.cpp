//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : geomultirenderableobject.cpp
//  @ Date : 2014/7/6
//  @ Author : 盛佳良
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#include "vrmine\vr_spatialrender\baserender\geomultirenderableobject.h"
#include "vrmine\vr_core\coredefine.h"

using namespace VirtualMine::SpatialInterface;

namespace VirtualMine
{
	namespace BaseRender
	{
		CGeoMultiRenderableObject::CGeoMultiRenderableObject()
		{
		
		}

		CGeoMultiRenderableObject::~CGeoMultiRenderableObject()
		{

			if (this->mDataVector.size() > 0)
			{
				GeoExtentionDataVector::iterator bItr = this->mDataVector.begin();
				GeoExtentionDataVector::iterator eItr = this->mDataVector.end();
				while (bItr != eItr)
				{

					if ((*bItr)->getExtentionData())
					{
						Ogre::ManualObject* pObject = (*bItr)->getExtentionData();
				    	if(pObject->getParentNode())
						{
							pObject->detachFromParent();
						}
						if (this->getGeoSceneManager())
						{
							this->getGeoSceneManager()->destroyManualObject((*bItr)->getExtentionData());
						}
					}

					++bItr;
				}
				this->mDataVector.clear();
			}

		/*	if (this->mGeoObjectVector.size()>0)
			{
				GeoObjectVector::iterator itr = this->mGeoObjectVector.begin();
				GeoObjectVector::iterator itrend = this->mGeoObjectVector.end();
				while (itr != itrend)
				{
					delete (*itr);
					++itr;
				}
				this->mGeoObjectVector.clear();
			}*/



		}

		void CGeoMultiRenderableObject::addGeoObject(IGeoObject* pGeoObject)
		{
			this->mGeoObjectVector.push_back(pGeoObject);
		}

		void CGeoMultiRenderableObject::removeGeoObject(const int& index)
		{
			GeoObjectVector::iterator itr = this->mGeoObjectVector.erase(this->mGeoObjectVector.begin() + index);
			SAFE_DELETE(*itr);
		}

		IGeoObject* CGeoMultiRenderableObject::getGeoObject(const int& index)
		{
			if (this->mGeoObjectVector.size() > index)
			{
				return this->mGeoObjectVector.at(index);
			}
			else
			{
				return NULL;
			}
		}

		int CGeoMultiRenderableObject::getGeoObjectCount()
		{
			return this->mGeoObjectVector.size();
		}

		void CGeoMultiRenderableObject::getGeoExtentionDatas(GeoExtentionDataVector& geoExtensionDatas)
		{
			if (this->mDataVector.size() > 0)
			{
				GeoExtentionDataVector::iterator bItr = this->mDataVector.begin();
				GeoExtentionDataVector::iterator eItr = this->mDataVector.end();
				while (bItr != eItr)
				{
					geoExtensionDatas.push_back(*bItr);
					++bItr;
				}
			}
		}

		std::vector<VirtualMine::SpatialInterface::CGeoExtentionData*> CGeoMultiRenderableObject::getExtentionData()
		{
			return mDataVector;
		}

		VirtualMine::SpatialInterface::GeoObjectVector CGeoMultiRenderableObject::getGeoObjectVec()
		{
			return mGeoObjectVector;
		}

		 void CGeoMultiRenderableObject::addGeoExtentionData( VirtualMine::SpatialInterface::CGeoExtentionData* data )
		{
			this->mDataVector.push_back(data);
		}

	}
}
