//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : linestyle.cpp
//  @ Date : 2021/11/10
//  @ Author : 李佳康
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  
//  @ Description : 


#include "vrmine\vr_style\style\prolanewaystyle.h"
#include <OGRE/Ogre.h>
using namespace Ogre;

namespace VirtualMine
{
	namespace Style
	{

		CProLanewayStyle::CProLanewayStyle()
		{
			this->mHeight = 2.0f;
			this->mWidth = 1.5f;
			this->mSmoothFactor = 2.0f;
			this->mState = LST_NORMAL;
			this->setSectionType(LanewaySectionType::Arch);
			this->setSupportType(LanewaySuppoetType::Anchor);
			//this->setWindType(LanewayWindType::LWT_FRESHAIR_FORWARD);
			this->mWindType = LanewayWindType::LWT_FRESHAIR_FORWARD;

		}

		CProLanewayStyle::~CProLanewayStyle()
		{

		}

		void CProLanewayStyle::setLanewayStateType(const LanewayStateType& state)
		{
			this->mState = state;
		}

		LanewayStateType CProLanewayStyle::getLanewayStateType()
		{
			return this->mState;
		}

		void CProLanewayStyle::setSectionType(LanewaySectionType sectionType /* = LanewaySectionType::Arch */)
		{
			this->mSectionType = sectionType;
		}

		LanewaySectionType CProLanewayStyle::getSectionType()
		{
			return this->mSectionType;
		}

		void CProLanewayStyle::setWidth(const Ogre::Real& width)
		{
			this->mWidth = width;
		}

		Ogre::Real CProLanewayStyle::getWidth()
		{
			return this->mWidth;
		}

		void CProLanewayStyle::setHeight(const Ogre::Real& height)
		{
			this->mHeight = height;
		}

		Ogre::Real CProLanewayStyle::getHeight()
		{
			return this->mHeight;
		}

		void CProLanewayStyle::setSmoothFactor(const Ogre::Real& factor)
		{
			this->mSmoothFactor = factor;
		}

		Ogre::Real CProLanewayStyle::getSmoothFactor()
		{
			return this->mSmoothFactor;
		}

		void CProLanewayStyle::setSupportType(LanewaySuppoetType supportType /* = LanewaySuppoetType::Unknown */)
		{
			this->mSupportType = supportType;
		}

		LanewaySuppoetType CProLanewayStyle::getSupportType()
		{
			return this->mSupportType;
		}

		std::map<LanewaySuppoetType,std::string> CProLanewayStyle::createMapSupportImg()
		{
			std::map<LanewaySuppoetType,std::string> mapSupport;

			mapSupport.insert(std::map<LanewaySuppoetType,std::string>::value_type(LanewaySuppoetType::Unknown,"laneway_default"));
			mapSupport.insert(std::map<LanewaySuppoetType,std::string>::value_type(LanewaySuppoetType::IBeam,"laneway_gongzigang"));
			mapSupport.insert(std::map<LanewaySuppoetType,std::string>::value_type(LanewaySuppoetType::Brick,"laneway_hongzhuan"));
			mapSupport.insert(std::map<LanewaySuppoetType,std::string>::value_type(LanewaySuppoetType::Ashlar,"laneway_liaoshi"));
			mapSupport.insert(std::map<LanewaySuppoetType,std::string>::value_type(LanewaySuppoetType::Anchor,"laneway_maopen"));
			mapSupport.insert(std::map<LanewaySuppoetType,std::string>::value_type(LanewaySuppoetType::Guniting,"laneway_penjiang"));
			return mapSupport;
		}

		std::map<LanewaySuppoetType,std::string> CProLanewayStyle::mMapSupportImg = createMapSupportImg();

		std::string CProLanewayStyle::getSupportImg()
		{
			std::map<LanewaySuppoetType,std::string>::const_iterator finder = mMapSupportImg.find(this->getSupportType());  
			if (finder != mMapSupportImg.end())  
			{  
				return finder->second;  
			}  
			else  
			{  
				return "laneway_default";
			}
		}

		void CProLanewayStyle::setWindType(const LanewayWindType& windType)
		{
			this->mWindType = windType;
		}

		LanewayWindType CProLanewayStyle::getWindType()
		{
			return this->mWindType;
		}

		std::string CProLanewayStyle::toString()
		{
			std::string result("");

			result.append("截面类型: ");
			switch(getSectionType())
			{
			case LanewaySectionType::Arch:
				result.append("拱形");
				break;
			case LanewaySectionType::Trapezoid:
				result.append("梯形");
				break;
			default:
				result.append("拱形");
				break;
			}

			result.append("\n支护类型:  ");

			switch (getSupportType())
			{
			case LanewaySuppoetType::Unknown:
				result.append("未知");
				break;
			case LanewaySuppoetType::Anchor:
				result.append("锚喷");
				break;
			case LanewaySuppoetType::Ashlar:
				result.append("料石堆砌");
				break;
			case LanewaySuppoetType::Brick:
				result.append("红砖堆砌");
				break;
			case LanewaySuppoetType::IBeam:
				result.append("工字钢");
				break;
			case LanewaySuppoetType::Guniting:
				result.append("喷浆");
				break;
			default:
				result.append("喷浆");
				break;
			}

			result.append("\n高度: ");
			result.append(Ogre::StringConverter::toString(this->getHeight(),10));
			result.append(" , 宽度:");
			result.append(Ogre::StringConverter::toString(this->getWidth(),10));

			return result;
		}
	}
}
