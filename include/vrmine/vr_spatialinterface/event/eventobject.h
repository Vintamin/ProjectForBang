//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : ilayer.h
//  @ Date : 2014/7/6
//  @ Author : 盛佳良
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#if !defined(_EVENT_OBJECT_H)
#define _EVENT_OBJECT_H

#include "vrmine\vr_spatialinterface\iscene.h"
#include "vrmine\vr_core\event.h"
#include "OGRE\OgreVector3.h"
#include "OGRE\OgreFrameListener.h"
#include "vrmine\vr_spatialinterface\ilayer.h"
#include "vrmine\vr_databaseengine\database\idatasourcemanager.h"
#include "string"
#include <vector>


namespace VirtualMine
{
	namespace SpatialInterface
	{

		class VR_SPATIALINTERFACE_DLL CSceneLoadEvent : public VirtualMine::Core::CEvent
		{
		public:
			CSceneLoadEvent();
			virtual ~CSceneLoadEvent();
			void setGeoScene(VirtualMine::SpatialInterface::IScene* ref_pScene);
			VirtualMine::SpatialInterface::IScene* getGeoScene();
		private:
			VirtualMine::SpatialInterface::IScene* ref_mpGeoScene;
		};

		class VR_SPATIALINTERFACE_DLL CSceneUnLoadEvent : public VirtualMine::Core::CEvent
		{
		public:
			CSceneUnLoadEvent() {};
			virtual ~CSceneUnLoadEvent() {};
		};

		class VR_SPATIALINTERFACE_DLL CSceneRenderEvent : public VirtualMine::Core::CEvent
		{
		public:
			CSceneRenderEvent();
			virtual ~CSceneRenderEvent();
			void setGeoScene(VirtualMine::SpatialInterface::IScene* ref_pScene);
			VirtualMine::SpatialInterface::IScene* getGeoScene();
		private:
			VirtualMine::SpatialInterface::IScene* ref_mpGeoScene;
		};

		class VR_SPATIALINTERFACE_DLL CFlyToEvent : public VirtualMine::Core::CEvent
		{
		public:
			CFlyToEvent();
			virtual ~CFlyToEvent();
			void setFlyToPosition(const Ogre::Vector3& position);
			Ogre::Vector3 getFlyToPosition();
			void setCurTime(const Ogre::Real& curTime);
			Ogre::Real getCurTime();

		private:
			Ogre::Vector3 mFlyToPosition;
			Ogre::Real mCurTime;
		};

		class VR_SPATIALINTERFACE_DLL CFrameEvent : public VirtualMine::Core::CEvent
		{
		public:
			CFrameEvent();
			virtual ~CFrameEvent();
			virtual void setTime(const Ogre::Real& timeSinceLastEvent,const Ogre::Real& timeSinceLastFrame);
			virtual void getTime(Ogre::Real& timeSinceLastEvent,Ogre::Real& timeSinceLastFrame);
			virtual void setCurTime(const Ogre::Real& curTime);
			virtual Ogre::Real getCurTime();

		private:
			Ogre::FrameEvent mData;
			Ogre::Real mCurTime;
		};

		class VR_SPATIALINTERFACE_DLL CDataSetLoadEvent : public VirtualMine::Core::CEvent
		{
		public:
			CDataSetLoadEvent();
			virtual ~CDataSetLoadEvent();
			std::string getDataSetName();
			void setDataSetName(const std::string& dataSetName);
			std::string getDataSetType();
			void setDataSetType(const std::string& dataSetType);

		protected:
			std::string mDataSetName;
			std::string mDataSetType;
		};

		class VR_SPATIALINTERFACE_DLL CLayerLoadEvent : public VirtualMine::Core::CEvent
		{
		public:
			CLayerLoadEvent();
			virtual ~CLayerLoadEvent();
			VirtualMine::SpatialInterface::ILayer* getLayer();
			void setLayer(VirtualMine::SpatialInterface::ILayer* ref_pLayer);

		protected:
			VirtualMine::SpatialInterface::ILayer* ref_mpLayer;
		};

		class VR_SPATIALINTERFACE_DLL CLayerRemoveEvent : public VirtualMine::Core::CEvent
		{
		public:
			CLayerRemoveEvent();
			virtual ~CLayerRemoveEvent();
			VirtualMine::SpatialInterface::ILayer* getLayer();
			void setLayer(VirtualMine::SpatialInterface::ILayer* ref_pLayer);

		protected:
			VirtualMine::SpatialInterface::ILayer* ref_mpLayer;
		};

		class VR_SPATIALINTERFACE_DLL CLayerRenderEvent : public VirtualMine::Core::CEvent
		{
		public:
			CLayerRenderEvent();
			virtual ~CLayerRenderEvent();
			VirtualMine::SpatialInterface::ILayer* getLayer();
			void setLayer(VirtualMine::SpatialInterface::ILayer* ref_pLayer);

		protected:
			VirtualMine::SpatialInterface::ILayer* ref_mpLayer;
		};

		class VR_SPATIALINTERFACE_DLL CExportInfoEvent : public VirtualMine::Core::CEvent
		{
		public:
			CExportInfoEvent();
			~CExportInfoEvent();
			void setInfo(const std::string& info);
			void setInfo(const std::vector<std::string>& info);
			std::string getInfo();
			std::vector<std::string> getInfoVector();

		protected:
			std::string mInfo;
			std::vector<std::string> mInfoVec;
		};

		class VR_SPATIALINTERFACE_DLL CDataSourceLoadEvent : public VirtualMine::Core::CEvent
		{
		public:
			CDataSourceLoadEvent();
			virtual ~CDataSourceLoadEvent();
			void setDataSourceManager(VirtualMine::Database::IDataSourceManager* ref_pDataSourceMgr);
			VirtualMine::Database::IDataSourceManager* getDataSourceManager();
		private:
			VirtualMine::Database::IDataSourceManager* ref_mpDataSourceMgr;
		};

		class VR_SPATIALINTERFACE_DLL CLayerEvent : public VirtualMine::Core::CEvent
		{
		public:
			CLayerEvent();
			virtual ~CLayerEvent();
			void setLayer(VirtualMine::SpatialInterface::ILayer* ref_pLayer);
			VirtualMine::SpatialInterface::ILayer* getLayer();
			std::string getType();
			void setType(const std::string& type);

		public:
			static std::string LET_INITIAL;
			static std::string LET_UNINITIAL;
			static std::string LET_NONE;

		private:
			VirtualMine::SpatialInterface::ILayer* ref_mpLayer;
			std::string mEventType;
		};
		
	}
}

#endif  //_ILAYER_H
