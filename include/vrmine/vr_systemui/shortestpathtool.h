//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : itool.h
//  @ Date : 2015/7
//  @ Author : 王凯
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#if !defined(_SHORTESTPATHTOOL_H)
#define _SHORTESTPATHTOOL_H

#include "vrmine/vr_systemui/systemui_config.h"
#include "vrmine\vr_core\event.h"
#include "vrmine\vr_spatialinterface\itool.h"
#include "vrmine\vr_scenecontrol\geospatialcontrol.h"
#include "vector"
#include <map>  
#include "vrmine/vr_geometry/geometry/laneway.h"
#include "ogre/Ogre.h"

#include "OGRE/OgreVector3.h"
#include "vrmine/vr_core/coredefine.h"
#include "vrmine/vr_spatialrender/baserender/multipoint.h"

namespace VirtualMine
{
	namespace SystemUI
	{
		class VR_SYSTEMUI_DLL CShortestPathTool : public VirtualMine::SpatialInterface::CTool
		{
		public:
			CShortestPathTool();
			virtual ~CShortestPathTool();
			void mouseReleaseEvent(const int& x ,const int& y , const int& button);
			void mousePressEvent(const int& x ,const int& y , const int& button);
			void mouseDoubleClickEvent(const int& x ,const int& y , const int& button);
			void mouseMoveEvent(const int& x ,const int& y, const int& button);
			void wheelEvent(const int& x ,const int& y , const int& delta);
			void keyPressEvent(const int& key);
			bool handleEvent(VirtualMine::Core::CEvent* evt);
			void setGeoSpatialControl(VirtualMine::Scene::CGeoSpatialControl* ref_pGeoSpatialControl);

			void createSection(Ogre::Vector3 pos);
			std::vector<int> getEscapeHouseID();///获取庇护所ID

			void initialvector(int vertexnum);
			void  floyd(int vertexnum);
			std::vector<int> displaypath(int source,int dest);



			void clear();	
			void renderPoints();
		protected:
			VirtualMine::Scene::CGeoSpatialControl* ref_mpGeoSpatialControl;

			std::vector<std::vector<double>> weight;
			std::vector<std::vector<int> > path;
		    std::vector<int> mEscapeHouseIDVec;
			int intmax;
			std::map<int,VirtualMine::Geometry::CLaneWayNodeGeometry*> mNodeIDMap;
			Ogre::ManualObject* mpShortestPathManual;
			std::vector<Ogre::ManualObject* > mShortestPathManualVec;
			////
			CoorVector mPoints;
			Ogre::Vector3 mCurPoint;
			VirtualMine::BaseRender::CMultiPoint* mpRenderPoints;
          
		};
	}
}

#endif  //_SHORTESTPATHTOOL_H
