//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : scenelayer.h
//  @ Date : 2014/7/6
//  @ Author : 盛佳良
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#if !defined(_SCENELAYER_H)
#define _SCENELAYER_H

#include "vrmine/vr_spatialinterface/ilayer.h"
#include "vrmine\vr_spatialinterface\istyle.h"
#include "vrmine\vr_spatiallayer\spatiallayer_config.h"
#include "vrmine\vr_spatialinterface\iscene.h"
#include "vrmine/vr_spatialinterface/igeoobject.h"


namespace VirtualMine
{
	namespace SpatialLayer
	{
		class VR_SPATIALLAYER_DLL CSceneLayer : public VirtualMine::SpatialInterface::ILayer
		{
		public:
			virtual ~CSceneLayer();
			virtual std::string getName();
			virtual void setName(const std::string& name);
			virtual bool getVisible();
			virtual void setVisible(const bool& value);
			virtual bool getSelectable();
			virtual void setSelectable(const bool& value);
			virtual void draw();
			virtual void update();
			virtual void initialise();
			virtual void notifyUpdate();
			virtual void setType(const std::string& type);
			virtual std::string getType();
			virtual VirtualMine::Database::IDataset* getDataSet();
			virtual void setDataSet(VirtualMine::Database::IDataset* pDataSet);
			virtual void setDatasource(VirtualMine::Database::IDataSource* pDatasoure);
			virtual VirtualMine::Database::IDataSource* getDatabase();
			virtual void setStyle(VirtualMine::SpatialInterface::IStyle* pStyle);
			virtual VirtualMine::SpatialInterface::IStyle* getStyle();
			virtual void toStream();
			virtual void fromStream();
			virtual void setGeoSceneManager(Ogre::SceneManager* ref_pSceneManager);
			virtual Ogre::SceneManager* getGeoSceneManager();
			virtual void setBoundingBox(const Ogre::AxisAlignedBox& boundingBox);
			virtual Ogre::AxisAlignedBox& getBoundingBox();
			virtual bool contains(const double& x,const double& z);
			virtual void setScene(VirtualMine::SpatialInterface::IScene* pScene);
			virtual VirtualMine::SpatialInterface::IScene* getScene();
			virtual void getGeoObjects(VirtualMine::SpatialInterface::GeoObjectVector& geoObjects);
			virtual VirtualMine::SpatialInterface::IGeoObject* getGeoObject(const std::string& name);
			virtual VirtualMine::SpatialInterface::GeoObjectVector getGeoObjectVector();


			virtual VirtualMine::SpatialInterface::IRenderableObject* getRenderableObject();
			virtual void setFrameMode(bool isFrameMode);
			virtual void setLayerMaxRenderDistance(const double& value);
			virtual double getLayerMaxRenderDistance();
			virtual void setLayerMinRenderDistance(const double& value);
			virtual double getLayerMinRenderDistance();
			virtual void setNeedLabel(const bool& needLabel);
			virtual bool getNeedLabel();
			virtual void setLabelMaxRenderDistance(const double& value);
			virtual double getLabelMaxRenderDistance();
			virtual void setLabelMinRenderDistance(const double& value);
			virtual double getLabelMinRenderDistance();
			virtual void resetResource(); 
			virtual std::vector<Ogre::SceneNode*> getTextNodes();

			


		protected:
			CSceneLayer();

		protected:
			std::string mName;
			std::string mType;
			bool mVisible;
			bool mSelectable;
			bool mHasInitialised;
			bool mHasRenderToScene;
			Ogre::SceneNode* mpNode;
			Ogre::AxisAlignedBox mBoundingBox;
			VirtualMine::Database::IDataset* ref_mpDataSet;
			VirtualMine::Database::IDataSource* ref_mpDatabase;
			VirtualMine::SpatialInterface::IStyle* mpStyle;
			VirtualMine::SpatialInterface::IRenderableObject* mpRenderableObject;
			Ogre::SceneManager* ref_mpGeoSceneManager;
			VirtualMine::SpatialInterface::IScene* ref_mpGeoSpatialScene;
			VirtualMine::SpatialInterface::GeoObjectVector mGeoObjects;
			std::vector<Ogre::SceneNode*> mTextNodes;//暂时用注记节点集合，之后需要考虑合理的方案
			bool mNeedLabel;//是否需要显示文字注记（目前只在初始化时设置起作用）
			double mLayerMaxRenderDistance;//图层要素的最大显示距离（暂时无用）
			double mLayerMinRenderDistance;//图层要素的最小显示距离（暂时无用）
			//当标注与相机的位置的距离小于最大显示距离并且小于最小显示距离才显示
			double mLabelMaxRenderDistance;//图层标注的最大显示距离
			double mLabelMinRenderDistance;//图层标注的最小显示距离
		};
	}
}

#endif  //_SCENELAYER_H
