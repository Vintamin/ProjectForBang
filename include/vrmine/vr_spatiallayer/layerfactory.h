//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : ilayer.h
//  @ Date : 2014/7/6
//  @ Author : 盛佳良
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#if !defined(_LAYER_FACTORY_H)
#define _LAYER_FACTORY_H

#include "vrmine/vr_spatiallayer/spatiallayer_config.h"
#include "vrmine\vr_spatialinterface\ilayer.h"
#include "vrmine/vr_core/factory.h"
#include <string>

namespace VirtualMine
{
	namespace SpatialLayer
	{
		class VR_SPATIALLAYER_DLL CLaneWayLayerFactory : public VirtualMine::SpatialInterface::CLayerFactory
		{
		public:
			CLaneWayLayerFactory();
			virtual ~CLaneWayLayerFactory();
			virtual VirtualMine::SpatialInterface::ILayer* createInstance(const std::string& name);
			virtual void destroyInstance(VirtualMine::SpatialInterface::ILayer* pLayer);
			virtual std::string getType();
		};

		///工作面
		class VR_SPATIALLAYER_DLL CWorkingplaneLayerFactory : public VirtualMine::SpatialInterface::CLayerFactory
		{
		public:
			CWorkingplaneLayerFactory();
			virtual ~CWorkingplaneLayerFactory();
			virtual VirtualMine::SpatialInterface::ILayer* createInstance(const std::string& name);
			virtual void destroyInstance(VirtualMine::SpatialInterface::ILayer* pLayer);
			virtual std::string getType();
		};



		class VR_SPATIALLAYER_DLL CImageLayerFactory : public VirtualMine::SpatialInterface::CLayerFactory
		{
		public:
			CImageLayerFactory();
			virtual ~CImageLayerFactory();
			virtual VirtualMine::SpatialInterface::ILayer* createInstance(const std::string& name);
			virtual void destroyInstance(VirtualMine::SpatialInterface::ILayer* pLayer);
			virtual std::string getType();
		};

		class VR_SPATIALLAYER_DLL CDemLayerFactory : public VirtualMine::SpatialInterface::CLayerFactory
		{
		public:
			CDemLayerFactory();
			virtual ~CDemLayerFactory();
			virtual VirtualMine::SpatialInterface::ILayer* createInstance(const std::string& name);
			virtual void destroyInstance(VirtualMine::SpatialInterface::ILayer* pLayer);
			virtual std::string getType();
		};

		class VR_SPATIALLAYER_DLL CDrillLayerFactory : public VirtualMine::SpatialInterface::CLayerFactory
		{
		public:
			CDrillLayerFactory();
			virtual ~CDrillLayerFactory();
			virtual VirtualMine::SpatialInterface::ILayer* createInstance(const std::string& name);
			virtual std::string getType();
		};

		class VR_SPATIALLAYER_DLL CMiningAreaLayerFactory : public VirtualMine::SpatialInterface::CLayerFactory
		{
		public:
			CMiningAreaLayerFactory();
			virtual ~CMiningAreaLayerFactory();
			virtual VirtualMine::SpatialInterface::ILayer* createInstance(const std::string& name);
			virtual std::string getType();
		};

		class VR_SPATIALLAYER_DLL CCoalLayerFactory : public VirtualMine::SpatialInterface::CLayerFactory
		{
		public:
			CCoalLayerFactory();
			virtual ~CCoalLayerFactory();
			virtual VirtualMine::SpatialInterface::ILayer* createInstance(const std::string& name);
			virtual std::string getType();
		};

		class VR_SPATIALLAYER_DLL CModelLayerFactory : public VirtualMine::SpatialInterface::CLayerFactory
		{
		public:
			CModelLayerFactory();
			virtual ~CModelLayerFactory();
			virtual VirtualMine::SpatialInterface::ILayer* createInstance(const std::string& name);
			virtual void destroyInstance(VirtualMine::SpatialInterface::ILayer* pLayer);
			virtual std::string getType();
		};
		class VR_SPATIALLAYER_DLL CFaultLayerFactory : public VirtualMine::SpatialInterface::CLayerFactory
		{
		public:
			CFaultLayerFactory();
			virtual ~CFaultLayerFactory();
			virtual VirtualMine::SpatialInterface::ILayer* createInstance(const std::string& name);
			virtual void destroyInstance(VirtualMine::SpatialInterface::ILayer* pLayer);
			virtual std::string getType();
		};
		class VR_SPATIALLAYER_DLL CTerraneLayerFactory : public VirtualMine::SpatialInterface::CLayerFactory
		{
		public:
			CTerraneLayerFactory();
			virtual ~CTerraneLayerFactory();
			virtual VirtualMine::SpatialInterface::ILayer* createInstance(const std::string& name);
			virtual void destroyInstance(VirtualMine::SpatialInterface::ILayer* pLayer);
			virtual std::string getType();
		};

		class VR_SPATIALLAYER_DLL CShotHoleLayerFactory : public VirtualMine::SpatialInterface::CLayerFactory
		{
		public:
			CShotHoleLayerFactory();
			virtual ~CShotHoleLayerFactory();
			virtual VirtualMine::SpatialInterface::ILayer* createInstance(const std::string& name);
			virtual void destroyInstance(VirtualMine::SpatialInterface::ILayer* pLayer);
			virtual std::string getType();
		};

		class VR_SPATIALLAYER_DLL CLanewaySectionForBangLayerFactory : public VirtualMine::SpatialInterface::CLayerFactory
		{
		public:

			CLanewaySectionForBangLayerFactory();
			virtual ~CLanewaySectionForBangLayerFactory();
			virtual VirtualMine::SpatialInterface::ILayer* createInstance(const std::string& name);
			virtual void destroyInstance(VirtualMine::SpatialInterface::ILayer* pLayer);
			virtual std::string getType();
		};

		class VR_SPATIALLAYER_DLL CEscpeRouteLayerFactory : public VirtualMine::SpatialInterface::CLayerFactory
		{
		public:
			CEscpeRouteLayerFactory();
			virtual ~CEscpeRouteLayerFactory();
			virtual VirtualMine::SpatialInterface::ILayer* createInstance(const std::string& name);
			virtual void destroyInstance(VirtualMine::SpatialInterface::ILayer* pLayer);
			virtual std::string getType();
		};

		//kk施工进度
		class VR_SPATIALLAYER_DLL CConProgressLayerFactory : public VirtualMine::SpatialInterface::CLayerFactory
		{
		public:
			CConProgressLayerFactory();
			virtual ~CConProgressLayerFactory();
			virtual VirtualMine::SpatialInterface::ILayer* createInstance(const std::string& name);
			virtual void destroyInstance(VirtualMine::SpatialInterface::ILayer* pLayer);
			virtual std::string getType();
		};

		class VR_SPATIALLAYER_DLL CLayerFactoryRegister : public VirtualMine::Core::CFactoryRegister
		{
		public:
			~CLayerFactoryRegister();
			static CLayerFactoryRegister* getSingletonPtr();
			static CLayerFactoryRegister& getSingleton();
		protected:
			CLayerFactoryRegister();
			
		protected:
			static CLayerFactoryRegister* mpSingletonPtr;
		};
	
	}
}

#endif  //_ILAYER_H
