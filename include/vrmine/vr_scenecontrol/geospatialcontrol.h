//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : 三维数字矿山平台
//  @ File Name : geospatialcontrol.h
//  @ Date : 2014/7/6
//  @ Author : 盛佳良
//  @ Implement : 
//  @ Company : 中国矿业大学(北京)
//  @ Copyright:  2014-2020
//  @ Description : 


#if !defined(_GEOSPATIALCONTROL_H)
#define _GEOSPATIALCONTROL_H

#include <OGRE\Ogre.h>
#include "vrmine\vr_core\baseobject.h"
#include "vrmine\vr_scenecontrol\scenecontrol_config.h"
#include "vrmine\vr_spatialengine\geocameraoperator.h"
#include "vrmine\vr_spatialengine\geoscenemanager.h"
#include "vrmine\vr_spatialinterface\itool.h"
#include "vrmine\vr_spatialinterface\iscene.h"
#include "vrmine\vr_scenecontrol\scenequerylistener.h"
#include "vrmine\vr_core\event.h"
#include "vrmine\vr_spatialinterface\iwidget.h"

namespace VirtualMine
{
	namespace Scene
	{
		class IScene;
		class CGeoSpatialControl_PrivateData;
		class VR_SCENECONTROL_DLL CGeoSpatialControl : public VirtualMine::Core::CBaseObject
		{
		public:
			CGeoSpatialControl();
			~CGeoSpatialControl();
			void load(VirtualMine::SpatialInterface::IScene* ref_pScene);
			void unLoad();
			void flyTo(const double& x ,const double& y , const double& z);
			void setCurrentFlyPath();
			void getCurrentFlyPath();
			void startFly();
			void stopFly();
			void pauseFly();
			void continueFly();
			void setCurrentTool(VirtualMine::SpatialInterface::ITool* pTool );
			VirtualMine::SpatialInterface::ITool* getCurrentTool();
			void addSceneQueryListener(CSceneQueryListener* ref_SceneQueryListener);
			void removeSceneQueryListener(CSceneQueryListener* ref_SceneQueryListener);
			//创建渲染窗口
			Ogre::RenderWindow* getRenderWindow();
			void setupWindowView(const size_t& HWND,const int& width,const int& height);
			void updateVRScene();
			//获取窗口rooteWidget
			VirtualMine::SpatialInterface::IWidget* getRootWidget();
			//UI事件处理
			void mouseReleaseEvent(const int& x ,const int& y , const int& button);
			void mousePressEvent(const int& x ,const int& y , const int& button);
			void mouseDoubleClickEvent(const int& x ,const int& y , const int& button);
			void mouseMoveEvent(const int& x ,const int& y, const int& button);
			void wheelEvent(const int& x ,const int& y , const int& delta);
			void keyPressEvent(const int& key);
			void resizeEvent(const int& width,const int& height);
			void timerEvent();
			void handleEvent();
			//获取控件资源
			VirtualMine::SpatialEngine::CGeoSceneCamera* getGeoSceneCamera();
			VirtualMine::SpatialEngine::CGeoSceneManager* getGeoSceneManager();
			VirtualMine::SpatialEngine::CGeocameraOperator* getGeocameraOperator();
			//////////////////////////////////////////////////////////////////////////
			//图层相关
			//获取地表指定点的高程
			double getHeight(const double& x,const double& z);
			double getSlope(const double& x,const double& y,const double& z);
			VirtualMine::SpatialInterface::IScene* getScene();

			//关于场景查询相关
			void beforeRayQuery();
			void afterRayQuery(Ogre::RaySceneQueryResultEntry& resultObject);
			//////////////////////////////////////////////////////////////////////////
			void frameStarted(const Ogre::FrameEvent& evt);
			//设置相关
			void setSkyState(const bool& visible);
			bool getSkyState();


			//////new ui
			//获取tabwidget状态
			void settabwidget(const bool& visible);
			bool gettabwidget();


			Ogre::Overlay* getcompassPic();
			Ogre::Overlay* getcompassPic_slider();
			Ogre::Overlay* getcompass_up();
			Ogre::Overlay* getcompass_down();
			Ogre::Overlay* getcompass_left();
			Ogre::Overlay* getcompass_right();
		//	Ogre::Overlay* getmppushbackBtn();
			Ogre::Overlay* getOutTextOverlay();
			Ogre::OverlayElement* getOutTextElement();

			//kk定义的场景管理器
			//VirtualMine::SpatialEngine::CGeoSceneManager* mpGeoSceneManager;

		protected:
			void setScene(VirtualMine::SpatialInterface::IScene* ref_pScene);
			void setupResources();
			void initialScene();
			void updateCamaraState();
			void updateSceneState();
			void upateOneFrame();
		private:
			Ogre::Root * mpRoot;
			Ogre::RenderWindow* mpRenderWindow;
			VirtualMine::SpatialEngine::CGeoSceneCamera* mpGeoSceneCamera;
			//kk,原始代码
			VirtualMine::SpatialEngine::CGeoSceneManager* mpGeoSceneManager;
			Ogre::Viewport* mpViewPort;
			Ogre::String mResourcePath;
			Ogre::String mConfigPath;
			CGeoSpatialControl_PrivateData* mpPrivate;


			//////new ui
			Ogre::Overlay* compassOverlay;
			Ogre::Overlay* compass_silderOverlay;
			Ogre::Overlay* compass_upOverlay;
			Ogre::Overlay* compass_downOverlay;
			Ogre::Overlay* compass_leftOverlay;
			Ogre::Overlay* compass_rightOverlay;
			///输出框
			Ogre::Overlay* outTextOverlay;
			Ogre::OverlayElement* outTextElement;

			bool istabwidget;
			bool isslider;   //指北针silder 


		//	Ogre::Overlay* mppushbackBtn;
			
		};

		class VR_SCENECONTROL_DLL CControlInitialEvent : public VirtualMine::Core::CEvent
		{
		public:
			CControlInitialEvent();
			~CControlInitialEvent();
			void setBindingObject(CGeoSpatialControl* ref_pBindingObject);
			CGeoSpatialControl* getBindingObject();
		private:
			CGeoSpatialControl* ref_mpBindingObject;


		};

		class VR_SCENECONTROL_DLL CSceneLoadHandler_CGeoSpatialControl : public VirtualMine::Core::CEventHandler
		{
		public :
			CSceneLoadHandler_CGeoSpatialControl();
			CSceneLoadHandler_CGeoSpatialControl(CGeoSpatialControl* pControl);
			virtual ~CSceneLoadHandler_CGeoSpatialControl();
			virtual bool handleEvent(VirtualMine::Core::CEvent* evt);

		private:
			CGeoSpatialControl* ref_mpControl;
		};
	}
}

#endif  //_GEOSPATIALCONTROL_H
